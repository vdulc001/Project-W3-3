
import edu.odu.cs.zeil.report_accumulator.ReportStats 

buildscript {
    repositories {
        ivy { // for report-accumulator
            url 'https://www.cs.odu.edu/~zeil/ivyrepo'
        }
	}
    dependencies {
        classpath "org.jbake:jbake-gradle-plugin:5.0.0"
        classpath 'edu.odu.cs.zeil:report_accumulator:1.2'
    }
}

plugins {
	id 'java'
	id "org.jbake.site" version "5.5.0"
	id "org.xbib.gradle.plugin.jflex" version "1.5.0"
    id "org.xbib.gradle.plugin.git" version "2.0.0"
}



java {
     sourceCompatibility = JavaVersion.toVersion(11)
     targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
	     jcenter()
	     ivy { 
          url 'https://www.cs.odu.edu/~zeil/ivyrepo'
      }
}

dependencies {
	    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	    testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation 'junit:junit:4.13.2' 
     	 //compile 'edu.odo.cs.cs350:sourceSuffixTrees:1.4+'
}

jar {
    manifest {
        attributes 'Main-Class': 'edu.odu.cs.cs350.CommandLineProcessor'
    }
	baseName 'DupDetector'
}

test {
     ignoreFailures = true
     useJUnitPlatform()
}

task reports (dependsOn: ['javadoc', 'check']) {
    description 'Generate all reports for this project'
}

javadoc {
    failOnError false
}

//PMD Reports Page//
/*import edu.odu.cs.zeil.report_accumulator.ReportStats     


task collectStats (type: ReportStats, dependsOn: ['build','reports']) { 
    description "Collect statistics from various reports & analysis tools"
    reportsURL = 'https://www.cs.odu.edu/~zeil/gitlab/' + project.name + '/reports'
}*/

//JBake Website Task//
task copyJDocs (type: Copy) {
    from 'build/docs'
    into 'build/tmp/website/assets'
    dependsOn 'javadoc'
}
task copyReports (type: Copy) {
    from 'build/reports'
    into 'build/tmp/website/assets'
    dependsOn 'reports'
}
task copyJbakeTemplates (type: Copy) {
    from 'src/jbake'
    into 'build/tmp/website'
}
task buildHomePage (dependsOn: copyJbakeTemplates) {
	 inputs.files ( 'build/tmp/website/content/home0.md', '/README.md')
	 outputs.file ( 'build/tmp/website/content/home.md' )
	 doLast  {
	     outputs.files.singleFile.withOutputStream { out ->
	         for ( file in inputs.files ) file.withInputStream {
		 	     out << it << '\n' }
	    }
	 }
}
jbake {
	 srcDirName = "build/tmp/website"
}

task setupWebsite (dependsOn: ['buildHomePage', 'copyReports', 'copyJDocs']){
}

bake.dependsOn "setupWebsite"

////////  Website publication on GitHub pages ///////////////////
task clonePages() {                                            
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
        grgit.close()
    }
}

task copywReports (dependsOn: ['bake', 'clonePages']) {  
    doLast {
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/jbake')
        }
    }
}
task updateGHPages (dependsOn: 'copywReports') {                   
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.close()
    }
}

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Jacinda/Desktop/DupDetector/Project-W3-3/src/main/jflex/specifications.jflex

package edu.odu.cs.cs350;
//@SuppressWarnings("unused")


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class GeneratedScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\6"+
    "\32\11\1\43\1\44\1\45\1\46\1\47\1\6\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\11\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\6\0\1\105\32\0"+
    "\2\6\4\11\4\6\1\11\2\6\1\0\7\6\1\11"+
    "\4\6\1\11\5\6\27\11\1\6\37\11\1\6\u01ca\11"+
    "\4\6\14\11\16\6\5\11\7\6\1\11\1\6\1\11"+
    "\21\6\160\0\5\11\1\6\2\11\2\6\4\11\1\6"+
    "\1\11\6\6\1\11\1\6\3\11\1\6\1\11\1\6"+
    "\24\11\1\6\123\11\1\6\213\11\1\6\5\0\2\6"+
    "\246\11\1\6\46\11\2\6\1\11\6\6\51\11\6\6"+
    "\1\11\1\6\55\0\1\6\1\0\1\6\2\0\1\6"+
    "\2\0\1\6\1\0\10\6\33\11\4\6\4\11\15\6"+
    "\6\0\5\6\1\11\4\6\13\0\1\6\1\0\3\6"+
    "\53\11\37\0\4\6\2\11\1\0\143\11\1\6\1\11"+
    "\10\0\1\6\6\0\2\11\2\0\1\6\4\0\2\11"+
    "\12\0\3\11\2\6\1\11\17\6\1\0\1\11\1\0"+
    "\36\11\33\0\2\6\131\11\13\0\1\11\16\6\12\0"+
    "\41\11\11\0\2\11\4\6\1\11\2\6\1\0\30\11"+
    "\4\0\1\11\11\0\1\11\3\0\1\11\5\0\22\6"+
    "\31\11\3\0\4\6\13\11\65\6\25\11\1\6\22\11"+
    "\13\6\61\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\2\0\2\6\12\0\1\6\20\11\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\1\11\3\6\4\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\1\11\10\6\1\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\4\11\7\6\2\11"+
    "\1\6\1\0\2\6\3\0\1\6\6\11\4\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\2\11\1\6\2\11"+
    "\1\6\2\11\2\6\1\0\1\6\5\0\4\6\2\0"+
    "\2\6\3\0\3\6\1\0\7\6\4\11\1\6\1\11"+
    "\7\6\14\0\3\11\1\0\13\6\3\0\1\6\11\11"+
    "\1\6\3\11\1\6\26\11\1\6\7\11\1\6\2\11"+
    "\1\6\5\11\2\6\1\0\1\11\10\0\1\6\3\0"+
    "\1\6\3\0\2\6\1\11\17\6\2\11\2\0\2\6"+
    "\12\0\1\6\1\11\7\6\1\11\6\0\1\6\3\0"+
    "\1\6\10\11\2\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\3\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\1\6\1\11\20\6"+
    "\1\0\1\11\1\6\6\11\3\6\3\11\1\6\4\11"+
    "\3\6\2\11\1\6\1\11\1\6\2\11\3\6\2\11"+
    "\3\6\3\11\3\6\14\11\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\11\6\6\1\0\16\6\12\0"+
    "\11\6\1\11\6\6\5\0\10\11\1\6\3\11\1\6"+
    "\27\11\1\6\20\11\3\6\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\11\5\6\2\11"+
    "\2\0\2\6\12\0\20\6\1\11\3\0\1\6\10\11"+
    "\1\6\3\11\1\6\27\11\1\6\12\11\1\6\5\11"+
    "\2\6\1\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\7\6\1\11\1\6\2\11\2\0\2\6"+
    "\12\0\1\6\2\11\15\6\4\0\11\11\1\6\3\11"+
    "\1\6\51\11\2\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\1\11\5\6\3\11\1\0\7\6\3\11\2\0"+
    "\2\6\12\0\12\6\6\11\1\6\3\0\1\6\22\11"+
    "\3\6\30\11\1\6\11\11\1\6\1\11\2\6\7\11"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\6\6\12\0\2\6\2\0\15\6\60\11\1\0\2\11"+
    "\7\0\4\6\10\11\10\0\1\6\12\0\47\6\2\11"+
    "\1\6\1\11\1\6\5\11\1\6\30\11\1\6\1\11"+
    "\1\6\12\11\1\0\2\11\11\0\1\11\2\6\5\11"+
    "\1\6\1\11\1\6\6\0\2\6\12\0\2\6\4\11"+
    "\40\6\1\11\27\6\2\0\6\6\12\0\13\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\2\0\10\11\1\6"+
    "\44\11\4\6\24\0\1\6\2\0\5\11\13\0\1\6"+
    "\44\0\11\6\1\0\71\6\53\11\24\0\1\11\12\0"+
    "\6\6\6\11\4\0\4\11\3\0\1\11\3\0\2\11"+
    "\7\0\3\11\4\0\15\11\14\0\1\11\17\0\2\6"+
    "\46\11\1\6\1\11\5\6\1\11\2\6\53\11\1\6"+
    "\115\11\1\6\4\11\2\6\7\11\1\6\1\11\1\6"+
    "\4\11\2\6\51\11\1\6\4\11\2\6\41\11\1\6"+
    "\4\11\2\6\7\11\1\6\1\11\1\6\4\11\2\6"+
    "\17\11\1\6\71\11\1\6\4\11\2\6\103\11\2\6"+
    "\3\0\40\6\20\11\20\6\126\11\2\6\6\11\3\6"+
    "\u016c\11\2\6\21\11\1\6\32\11\5\6\113\11\3\6"+
    "\13\11\7\6\15\11\1\6\4\11\3\0\13\6\22\11"+
    "\3\0\13\6\22\11\2\0\14\6\15\11\1\6\3\11"+
    "\1\6\2\0\14\6\64\11\40\0\3\6\1\11\3\6"+
    "\2\11\1\0\2\6\12\0\41\6\4\0\1\6\12\0"+
    "\6\6\131\11\7\6\5\11\2\0\42\11\1\0\1\11"+
    "\5\6\106\11\12\6\37\11\1\6\14\0\4\6\14\0"+
    "\12\6\12\0\36\11\2\6\5\11\13\6\54\11\4\6"+
    "\32\11\6\6\12\0\46\6\27\11\5\0\4\6\65\11"+
    "\12\0\1\6\35\0\2\6\13\0\6\6\12\0\15\6"+
    "\1\11\10\6\16\0\1\6\2\0\77\6\5\0\57\11"+
    "\21\0\7\11\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\6\44\11"+
    "\24\0\10\6\12\0\3\6\3\11\12\0\44\11\2\6"+
    "\11\11\7\6\53\11\2\6\3\11\20\6\3\0\1\6"+
    "\25\0\4\11\1\0\6\11\1\0\2\11\3\0\1\11"+
    "\5\6\300\11\72\0\1\6\5\0\26\11\2\6\6\11"+
    "\2\6\46\11\2\6\6\11\2\6\10\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\37\11\2\6\65\11"+
    "\1\6\7\11\1\6\1\11\3\6\3\11\1\6\7\11"+
    "\3\6\4\11\2\6\6\11\4\6\15\11\5\6\3\11"+
    "\1\6\7\11\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\11\23\6\1\11\13\6\5\0\1\6\12\0\1\6"+
    "\1\11\15\6\1\11\20\6\15\11\3\6\40\11\20\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\11\4\6"+
    "\1\11\2\6\12\11\1\6\1\11\3\6\5\11\6\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\4\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\53\11\1\6\136\11\21\6\40\11\60\6\320\11\100\6"+
    "\375\11\3\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\37\11\2\0\120\11\2\0\45\6\11\11\2\6"+
    "\147\11\2\6\65\11\2\6\11\11\52\6\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\6\1\0"+
    "\13\6\1\11\7\6\64\11\14\6\2\0\62\11\22\0"+
    "\12\6\12\0\6\6\22\0\6\11\3\6\1\11\1\6"+
    "\2\11\13\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\6\6\5\11\1\0\12\11\12\0\5\11\1\6\51\11"+
    "\16\0\11\6\3\11\1\0\10\11\2\0\2\6\12\0"+
    "\6\6\27\11\3\6\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\6\3\11\2\6\13\11\5\0\2\6\3\11\2\0"+
    "\12\6\6\11\2\6\6\11\2\6\6\11\11\6\7\11"+
    "\1\6\7\11\1\6\53\11\1\6\16\11\6\6\163\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\20\0"+
    "\3\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\17\6\1\0\37\6\40\11"+
    "\15\6\36\11\5\6\46\11\5\0\5\6\36\11\2\6"+
    "\44\11\4\6\10\11\1\6\5\11\52\6\236\11\2\6"+
    "\12\0\6\6\44\11\4\6\44\11\4\6\50\11\10\6"+
    "\64\11\234\6\67\11\11\6\26\11\12\6\10\11\230\6"+
    "\6\11\2\6\1\11\1\6\54\11\1\6\2\11\3\6"+
    "\1\11\2\6\27\11\12\6\27\11\11\6\37\11\101\6"+
    "\23\11\1\6\2\11\12\6\26\11\12\6\32\11\106\6"+
    "\70\11\6\6\2\11\100\6\1\11\3\0\1\6\2\0"+
    "\5\6\4\0\4\11\1\6\3\11\1\6\35\11\2\6"+
    "\3\0\4\6\1\0\40\6\35\11\3\6\35\11\43\6"+
    "\10\11\1\6\34\11\2\0\31\6\66\11\12\6\26\11"+
    "\12\6\23\11\15\6\22\11\156\6\111\11\67\6\63\11"+
    "\15\6\63\11\15\6\44\11\4\0\10\6\12\0\u0146\6"+
    "\52\11\1\6\2\0\3\6\2\11\116\6\35\11\12\6"+
    "\1\11\10\6\26\11\13\0\137\6\25\11\33\6\27\11"+
    "\11\6\3\0\65\11\17\0\37\6\12\0\17\6\4\0"+
    "\55\11\13\0\2\6\1\0\17\6\1\0\2\6\31\11"+
    "\7\6\12\0\6\6\3\0\44\11\16\0\1\6\12\0"+
    "\4\6\1\11\2\0\1\11\10\6\43\11\1\0\2\6"+
    "\1\11\11\6\3\0\60\11\16\0\4\11\4\6\4\0"+
    "\1\6\14\0\1\11\1\6\1\11\43\6\22\11\1\6"+
    "\31\11\14\0\6\6\1\0\101\6\7\11\1\6\1\11"+
    "\1\6\4\11\1\6\17\11\1\6\12\11\7\6\57\11"+
    "\14\0\5\6\12\0\6\6\4\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\1\6\2\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\2\6\1\11\6\6\1\0\5\6\5\11\2\0"+
    "\2\6\7\0\3\6\5\0\213\6\65\11\22\0\4\11"+
    "\5\6\12\0\4\6\1\0\3\11\36\6\60\11\24\0"+
    "\2\11\1\6\1\11\10\6\12\0\246\6\57\11\7\0"+
    "\2\6\11\0\27\6\4\11\2\0\42\6\60\11\21\0"+
    "\3\6\1\11\13\6\12\0\46\6\53\11\15\0\1\11"+
    "\7\6\12\0\66\6\33\11\2\6\17\0\4\6\12\0"+
    "\306\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\42\6\71\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\271\6\1\11\54\6\4\11\37\6\232\11"+
    "\146\6\157\11\21\6\304\11\274\6\57\11\1\6\11\0"+
    "\307\6\107\11\271\6\71\11\7\6\37\11\1\6\12\0"+
    "\146\6\36\11\2\6\5\0\13\6\60\11\7\0\11\6"+
    "\4\11\14\6\12\0\11\6\25\11\5\6\23\11\260\6"+
    "\100\11\200\6\113\11\4\6\1\0\1\11\67\0\7\6"+
    "\4\0\15\11\100\6\2\11\1\6\1\11\1\0\13\6"+
    "\2\0\16\6\370\11\10\6\326\11\52\6\11\11\367\6"+
    "\37\11\61\6\3\11\21\6\4\11\10\6\u018c\11\4\6"+
    "\153\11\5\6\15\11\3\6\11\11\7\6\12\11\3\6"+
    "\2\0\1\6\4\0\301\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\11\1\6"+
    "\107\11\1\6\2\11\2\6\1\11\2\6\2\11\2\6"+
    "\4\11\1\6\14\11\1\6\1\11\1\6\7\11\1\6"+
    "\101\11\1\6\4\11\2\6\10\11\1\6\7\11\1\6"+
    "\34\11\1\6\4\11\1\6\5\11\1\6\1\11\3\6"+
    "\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\10\11\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\7\0\1\6"+
    "\21\0\2\6\7\0\1\6\2\0\1\6\5\0\325\6"+
    "\55\11\3\6\7\0\7\11\2\6\12\0\4\6\1\11"+
    "\u0171\6\54\11\16\0\5\6\306\11\13\6\7\0\51\6"+
    "\104\11\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6"+
    "\4\11\1\6\33\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\12\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\6\6\1\11\4\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\3\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\2\11\1\6\1\11\2\6\4\11\1\6"+
    "\7\11\1\6\4\11\1\6\4\11\1\6\1\11\1\6"+
    "\12\11\1\6\21\11\5\6\3\11\1\6\5\11\1\6"+
    "\21\11\u0134\6\12\0\6\6\336\11\42\6\65\11\13\6"+
    "\336\11\2\6\u0182\11\16\6\u0131\11\37\6\36\11\342\6"+
    "\113\11\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\24\5\1\32\1\33\1\34\1\35"+
    "\1\36\2\37\1\40\2\1\2\41\1\1\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\0\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\15\5\1\66\11\5\1\67"+
    "\10\5\1\33\23\5\1\70\1\71\1\72\1\73\1\74"+
    "\2\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\12\72\1\105\1\0\2\55\1\106\1\107\1\5\1\110"+
    "\1\111\27\5\1\112\3\5\1\113\3\5\1\114\1\5"+
    "\1\115\26\5\1\116\11\5\1\117\1\75\1\120\1\121"+
    "\1\122\2\0\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\3\5\1\131\2\5\1\132\1\5\1\133\1\5\1\134"+
    "\15\5\1\135\1\136\6\5\1\137\1\5\1\140\4\5"+
    "\1\141\22\5\1\142\2\5\1\143\5\5\1\144\10\5"+
    "\1\145\1\146\1\147\3\5\1\150\3\5\1\151\1\5"+
    "\1\152\11\5\1\153\1\154\10\5\1\155\10\5\1\156"+
    "\10\5\1\157\3\5\1\160\1\5\1\161\3\5\1\162"+
    "\3\5\1\163\1\5\1\164\15\5\1\165\1\166\2\5"+
    "\1\167\1\170\1\171\1\172\3\5\1\173\4\5\1\174"+
    "\4\5\1\175\1\176\1\177\1\200\1\201\1\202\4\5"+
    "\1\203\5\5\1\204\1\205\1\206\3\5\1\207\3\5"+
    "\1\210\6\5\1\211\2\5\1\212\2\5\1\213\1\5"+
    "\1\214\11\5\1\215\2\5\1\216\1\5\1\217\2\5"+
    "\1\220\1\221\1\222\1\5\1\223\4\5\1\224\1\225"+
    "\1\5\1\226\1\5\1\227\1\230\1\5\1\231\1\232"+
    "\1\5\1\233\3\5\1\234\1\5\1\235\1\236\1\237"+
    "\3\5\1\240\1\5\1\241\1\242\1\243\1\5\1\244"+
    "\1\245\10\5\1\246\14\5\1\247\5\5\1\250\2\5"+
    "\1\251\1\252\1\253\1\254\2\5\1\255\2\5\1\256"+
    "\1\5\1\257";

  private static int [] zzUnpackAction() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\322\0\u0118\0\u015e\0\322"+
    "\0\u01a4\0\u01ea\0\u0230\0\322\0\322\0\322\0\u0276\0\u02bc"+
    "\0\322\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\322\0\u0460"+
    "\0\u04a6\0\u04ec\0\322\0\322\0\322\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\322\0\u0af0\0\322\0\322\0\u0b36\0\322"+
    "\0\u0b7c\0\322\0\u0bc2\0\u0c08\0\322\0\u0c4e\0\u0c94\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\u0cda\0\322\0\u0d20\0\u0d66\0\322\0\u03d4\0\322\0\u0dac"+
    "\0\322\0\322\0\322\0\u0df2\0\322\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u01a4\0\u1482\0\u14c8\0\u150e"+
    "\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\322\0\322\0\322\0\322\0\322\0\u1c2a\0\u1c70"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\322\0\u1f72\0\322\0\u1fb8\0\322\0\322\0\u1ffe"+
    "\0\u2044\0\u01a4\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418"+
    "\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u01a4\0\u26d4\0\u271a\0\u2760\0\u01a4\0\u27a6\0\u27ec"+
    "\0\u2832\0\u01a4\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06"+
    "\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u01a4\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020"+
    "\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\322\0\322\0\322"+
    "\0\322\0\u1d88\0\u31c4\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\u320a\0\u3250\0\u3296\0\u01a4\0\u32dc\0\u3322\0\u01a4"+
    "\0\u3368\0\u01a4\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c"+
    "\0\u3782\0\u01a4\0\u01a4\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u01a4\0\u396c\0\u01a4\0\u39b2\0\u39f8\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\u3fb6\0\u01a4\0\u3ffc\0\u4042\0\u01a4\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u01a4\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u4416\0\u445c\0\u44a2\0\u01a4\0\u44e8\0\u452e\0\u4574\0\u01a4"+
    "\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u01a4\0\u01a4\0\u48bc\0\u4902\0\u4948"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u01a4\0\u4aec\0\u4b32"+
    "\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u01a4\0\u4d1c"+
    "\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u01a4"+
    "\0\u4f4c\0\u4f92\0\u4fd8\0\u01a4\0\u501e\0\u01a4\0\u5064\0\u50aa"+
    "\0\u50f0\0\u01a4\0\u5136\0\u517c\0\u51c2\0\u01a4\0\u5208\0\u01a4"+
    "\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u01a4\0\u01a4\0\u55dc"+
    "\0\u5622\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u5668\0\u56ae\0\u56f4"+
    "\0\u01a4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u01a4\0\u5852\0\u5898"+
    "\0\u58de\0\u5924\0\u01a4\0\u01a4\0\u01a4\0\u596a\0\u01a4\0\u01a4"+
    "\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u01a4\0\u5ac8\0\u5b0e\0\u5b54"+
    "\0\u5b9a\0\u5be0\0\u01a4\0\u01a4\0\u01a4\0\u5c26\0\u5c6c\0\u5cb2"+
    "\0\u01a4\0\u5cf8\0\u5d3e\0\u5d84\0\u01a4\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u01a4\0\u5f6e\0\u5fb4\0\u01a4\0\u5ffa"+
    "\0\u6040\0\u01a4\0\u6086\0\u01a4\0\u60cc\0\u6112\0\u6158\0\u619e"+
    "\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u01a4\0\u6342\0\u6388"+
    "\0\u01a4\0\u63ce\0\u01a4\0\u6414\0\u645a\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u64a0\0\u01a4\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u01a4\0\u01a4"+
    "\0\u65fe\0\u01a4\0\u6644\0\u01a4\0\u01a4\0\u668a\0\u01a4\0\u01a4"+
    "\0\u66d0\0\u01a4\0\u6716\0\u675c\0\u67a2\0\u01a4\0\u67e8\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u682e\0\u6874\0\u68ba\0\u01a4\0\u6900\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u6946\0\u01a4\0\u01a4\0\u698c\0\u69d2\0\u6a18"+
    "\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30\0\u6b76\0\u01a4\0\u6bbc\0\u6c02"+
    "\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u6dec\0\u6e32"+
    "\0\u6e78\0\u6ebe\0\u01a4\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c"+
    "\0\u01a4\0\u7062\0\u70a8\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u70ee"+
    "\0\u7134\0\u01a4\0\u717a\0\u71c0\0\u01a4\0\u7206\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\10\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\4\1\35\1\36\1\11"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\11"+
    "\1\46\1\11\1\47\1\50\1\51\1\52\1\53\1\11"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\2\11"+
    "\1\63\1\64\1\65\1\66\1\4\2\67\1\70\2\67"+
    "\1\71\2\67\1\72\33\67\1\73\41\67\2\74\1\75"+
    "\2\74\1\76\6\74\1\4\27\74\1\77\41\74\110\0"+
    "\1\5\143\0\1\100\45\0\1\11\10\0\1\11\13\0"+
    "\10\11\12\0\32\11\4\0\1\11\40\0\1\101\60\0"+
    "\1\102\24\0\1\103\105\0\1\104\65\0\1\105\17\0"+
    "\1\106\67\0\1\107\15\0\1\110\1\111\63\0\1\112"+
    "\105\0\1\113\4\0\1\114\13\0\1\115\72\0\10\25"+
    "\12\0\1\116\73\0\1\117\107\0\1\120\1\121\105\0"+
    "\1\122\105\0\1\123\1\124\104\0\1\125\45\0\1\11"+
    "\10\0\1\11\13\0\10\11\12\0\13\11\1\126\1\11"+
    "\1\127\4\11\1\130\1\131\1\132\5\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\11\11\1\133\4\11"+
    "\1\134\2\11\1\135\10\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\136\6\11\1\137\2\11"+
    "\1\140\2\11\1\141\13\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\142\10\11\1\143\11\11"+
    "\1\144\1\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\13\11\1\145\1\11\1\146\11\11\1\147\2\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\150\11\11\1\151\2\11\1\152\2\11\1\153\10\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\16\11"+
    "\1\154\13\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\6\11\1\155\6\11\1\156\14\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\16\11\1\157\13\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\24\11"+
    "\1\160\5\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\1\11\1\161\3\11\1\162\10\11\1\163\5\11"+
    "\1\164\5\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\17\11\1\165\1\11\1\166\10\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\21\11\1\167\2\11"+
    "\1\170\5\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\171\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\10\11\1\172\1\173\11\11\1\174"+
    "\2\11\1\175\1\11\1\176\1\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\5\11\1\177\2\11\1\200"+
    "\10\11\1\201\6\11\1\202\1\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\15\11\1\203\4\11\1\204"+
    "\7\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\11\11\1\205\4\11\1\206\13\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\3\11\1\207\4\11\1\210"+
    "\21\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\16\11\1\211\13\11\4\0\1\11\40\0\1\212\41\0"+
    "\1\213\3\0\2\67\1\0\2\67\1\0\2\67\1\0"+
    "\33\67\1\0\41\67\2\0\1\70\103\0\2\214\4\0"+
    "\2\214\1\215\3\214\1\216\10\214\4\217\2\220\11\214"+
    "\1\221\4\214\1\222\3\214\1\223\6\214\1\224\3\214"+
    "\1\225\1\214\1\226\12\214\15\0\1\227\73\0\1\75"+
    "\103\0\2\214\4\0\2\214\1\230\3\214\1\231\10\214"+
    "\4\232\2\233\11\214\1\234\4\214\1\235\3\214\1\236"+
    "\6\214\1\237\3\214\1\240\1\214\1\241\12\214\20\0"+
    "\1\242\66\0\17\113\1\243\66\113\2\114\1\244\2\114"+
    "\1\245\100\114\40\0\1\246\105\0\1\247\45\0\1\11"+
    "\10\0\1\11\13\0\10\11\12\0\11\11\1\250\20\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\4\11"+
    "\1\251\25\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\14\11\1\252\15\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\16\11\1\253\13\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\254\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\23\11"+
    "\1\255\6\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\16\11\1\256\13\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\257\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\22\11\1\260\1\261"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\11\1\262\30\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\1\11\1\263\30\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\1\264\13\11\1\265\1\266"+
    "\14\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\3\11\1\267\2\11\1\270\4\11\1\271\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\24\11\1\272"+
    "\5\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\15\11\1\273\14\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\22\11\1\274\7\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\24\11\1\275\5\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\17\11\1\276"+
    "\3\11\1\277\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\13\11\1\300\16\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\16\11\1\301\13\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\21\11\1\302"+
    "\10\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\11\11\1\303\20\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\23\11\1\304\6\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\305\7\11\1\306"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\15\11\1\307\14\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\23\11\1\310\6\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\14\11\1\311\15\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\26\11\1\312"+
    "\3\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\313\15\11\1\314\6\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\315\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\5\11\1\316"+
    "\24\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\317\31\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\320\4\11\1\321\13\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\2\11\1\322\27\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\6\11"+
    "\1\323\1\324\1\11\1\325\6\11\1\326\2\11\1\327"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\16\11\1\330\13\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\7\11\1\331\21\11\1\332\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\333\17\11"+
    "\1\334\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\335\20\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\15\11\1\336\14\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\14\11\1\337\15\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\11\11"+
    "\1\340\7\11\1\341\10\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\24\11\1\342\3\11\1\343\1\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\17\11"+
    "\1\344\12\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\345\10\11\1\346\7\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\11\11\1\347\20\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\21\11"+
    "\1\350\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\351\1\11\1\352\16\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\10\11\1\353\21\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\11\11"+
    "\1\354\20\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\21\11\1\355\10\11\4\0\1\11\25\0\6\220"+
    "\100\0\6\356\67\0\1\357\105\0\1\360\105\0\1\361"+
    "\10\0\6\362\67\0\1\361\10\0\6\363\67\0\1\364"+
    "\105\0\1\365\105\0\1\366\105\0\1\367\105\0\1\370"+
    "\105\0\1\371\71\0\17\113\1\243\4\113\1\244\61\113"+
    "\2\0\1\244\103\0\1\11\10\0\1\11\13\0\10\11"+
    "\12\0\7\11\1\372\22\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\373\31\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\14\11\1\374\15\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\16\11\1\375"+
    "\13\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\11\1\376\14\11\1\377\13\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\u0100\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\1\11\1\u0101"+
    "\30\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u0102\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\3\11\1\u0103\26\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\21\11\1\u0104\10\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\22\11\1\u0105"+
    "\7\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\11\1\u0106\17\11\1\u0107\6\11\1\u0108\1\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\17\11\1\u0109"+
    "\12\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\3\11\1\u010a\16\11\1\u010b\1\u010c\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\13\11\1\u010d\16\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\u010e\30\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u010f\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\2\11\1\u0110\27\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\u0111\30\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0112\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\14\11\1\u0113\15\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\13\11\1\u0114\2\11\1\u0115\13\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0116\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\22\11\1\u0117\7\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\u0118\30\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u0119\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\16\11"+
    "\1\u011a\13\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\u011b\20\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\7\11\1\u011c\22\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\u011d\30\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u011e\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\27\11\1\u011f\2\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\u0120\31\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\u0121\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\21\11\1\u0122"+
    "\10\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u0123\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\25\11\1\u0124\4\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\23\11\1\u0125\6\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\13\11\1\u0126"+
    "\16\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\13\11\1\u0127\16\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\11\11\1\u0128\20\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\15\11\1\u0129\14\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\24\11\1\u012a"+
    "\5\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\24\11\1\u012b\5\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\21\11\1\u012c\10\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\15\11\1\u012d\14\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\5\11\1\u012e"+
    "\24\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u012f\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\24\11\1\u0130\5\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\23\11\1\u0131\6\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\3\11\1\u0132"+
    "\26\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\17\11\1\u0133\12\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\22\11\1\u0134\7\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\5\11\1\u0135\10\11\1\u0136"+
    "\13\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u0137\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\5\11\1\u0138\24\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\16\11\1\u0139\13\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\11\11\1\u013a"+
    "\20\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\15\11\1\u013b\14\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\23\11\1\u013c\6\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\4\11\1\u013d\25\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\1\11\1\u013e"+
    "\30\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\11\1\u013f\30\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\13\11\1\u0140\16\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\1\u0141\31\11\4\0\1\11"+
    "\14\0\1\361\71\0\1\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u0142\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u0143\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\11\11\1\u0144\20\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\15\11"+
    "\1\u0145\14\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\21\11\1\u0146\10\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\12\11\1\u0147\17\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\10\11\1\u0148\21\11"+
    "\4\0\2\11\10\0\1\11\13\0\1\11\1\u0149\1\11"+
    "\1\u014a\2\11\1\u014b\1\11\12\0\32\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\22\11\1\u014c\7\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\26\11"+
    "\1\u014d\3\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u014e\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\11\11\1\u014f\20\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\13\11\1\u0150\16\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0151\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u0152\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\11\11\1\u0153\20\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u0154\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\24\11"+
    "\1\u0155\5\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u0156\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\13\11\1\u0157\16\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\14\11\1\u0158\15\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\11\11"+
    "\1\u0159\20\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\21\11\1\u015a\10\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\21\11\1\u015b\10\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u015c\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\23\11"+
    "\1\u015d\6\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u015e\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\15\11\1\u015f\14\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\2\11\1\u0160\27\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\22\11"+
    "\1\u0161\7\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\3\11\1\u0162\26\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u0163\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\17\11\1\u0164\12\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\u0165\30\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\20\11\1\u0166\11\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\u0167\30\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u0168\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\11\11"+
    "\1\u0169\20\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u016a\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\22\11\1\u016b\7\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u016c\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\11\11"+
    "\1\u016d\20\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\21\11\1\u016e\10\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\23\11\1\u016f\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u0170\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\16\11"+
    "\1\u0171\13\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\u0172\20\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\3\11\1\u0173\26\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\3\11\1\u0174\26\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\10\11"+
    "\1\u0175\21\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\13\11\1\u0176\16\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\u0177\30\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\26\11\1\u0178\3\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\4\11"+
    "\1\u0179\4\11\1\u017a\3\11\1\u017b\14\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\15\11\1\u017c\14\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\7\11"+
    "\1\u017d\22\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\7\11\1\u017e\22\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\24\11\1\u017f\5\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u0180\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\21\11"+
    "\1\u0181\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u0182\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u0183\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\u0184\14\11"+
    "\1\u0185\13\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\20\11\1\u0186\11\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\3\11\1\u0187\26\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\4\11\1\u0188\25\11"+
    "\4\0\2\11\10\0\1\11\13\0\5\11\1\u0189\2\11"+
    "\12\0\32\11\4\0\2\11\10\0\1\11\13\0\2\11"+
    "\1\u018a\5\11\12\0\32\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\u018b\31\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\1\11\1\u018c\30\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\23\11\1\u018d"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u018e\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\17\11\1\u018f\12\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\1\u0190\4\11\1\u0191\3\11"+
    "\1\u0192\20\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u0193\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\30\11\1\u0194\1\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\13\11\1\u0195\16\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0196\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u0197\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\11\11\1\u0198\20\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\3\11\1\u0199\26\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\23\11"+
    "\1\u019a\6\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u019b\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\4\11\1\u019c\25\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u019d\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\13\11"+
    "\1\u019e\16\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\17\11\1\u019f\12\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u01a0\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\20\11\1\u01a1\11\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\23\11"+
    "\1\u01a2\6\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01a3\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\23\11\1\u01a4\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\3\11\1\u01a5\26\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\3\11"+
    "\1\u01a6\26\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\27\11\1\u01a7\2\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\23\11\1\u01a8\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u01a9\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\21\11"+
    "\1\u01aa\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u01ab\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\4\11\1\u01ac\25\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\6\11\1\u01ad\23\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\3\11"+
    "\1\u01ae\26\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01af\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\10\11\1\u01b0\21\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\21\11\1\u01b1\10\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\u01b2\30\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\4\11\1\u01b3\25\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u01b4\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\4\11\1\u01b5\25\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\u01b6\30\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u01b7\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\u01b8\30\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\11\11\1\u01b9\20\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\u01ba"+
    "\31\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\20\11\1\u01bb\11\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\22\11\1\u01bc\7\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\6\11\1\u01bd\23\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\1\u01be\31\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\u01bf"+
    "\31\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\u01c0\31\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01c1\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\11\11\1\u01c2\20\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\24\11\1\u01c3\5\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\13\11"+
    "\1\u01c4\16\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01c5\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\3\11\1\u01c6\26\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\25\11\1\u01c7\1\11"+
    "\1\u01c8\2\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\15\11\1\u01c9\14\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\24\11\1\u01ca\5\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\17\11\1\u01cb\12\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\23\11"+
    "\1\u01cc\6\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\3\11\1\u01cd\26\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\11\11\1\u01ce\20\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u01cf\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\11"+
    "\1\u01d0\30\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\17\11\1\u01d1\12\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\21\11\1\u01d2\10\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\16\11\1\u01d3\13\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u01d4\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01d5\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\17\11\1\u01d6\12\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u01d7\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\21\11"+
    "\1\u01d8\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\5\11\1\u01d9\24\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\u01da\31\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\16\11\1\u01db\13\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\23\11\1\u01dc"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\1\u01dd\31\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\6\11\1\u01de\23\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\14\11\1\u01df\15\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u01e0\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\13\11"+
    "\1\u01e1\16\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\13\11\1\u01e2\16\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\23\11\1\u01e3\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\3\11\1\u01e4\11\11"+
    "\1\u01e5\14\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u01e6\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\23\11\1\u01e7\6\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u01e8\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\21\11"+
    "\1\u01e9\10\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\4\11\1\u01ea\25\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\1\11\1\u01eb\30\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\u01ec\30\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\17\11"+
    "\1\u01ed\12\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\u01ee\20\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u01ef\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\5\11\1\u01f0\24\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\u01f1"+
    "\31\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u01f2\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\3\11\1\u01f3\26\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\23\11\1\u01f4\6\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\21\11\1\u01f5"+
    "\10\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u01f6\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\21\11\1\u01f7\10\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\21\11\1\u01f8\10\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\17\11\1\u01f9"+
    "\12\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\22\11\1\u01fa\7\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\1\11\1\u01fb\1\11\1\u01fc\26\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\15\11\1\u01fd"+
    "\14\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u01fe\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\13\11\1\u01ff\16\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\5\11\1\u0200\24\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\4\11\1\u0201"+
    "\25\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\5\11\1\u0202\24\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\1\11\1\u0203\14\11\1\u0204\13\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\16\11\1\u0205"+
    "\13\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\15\11\1\u0206\14\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\22\11\1\u0207\7\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\u0208\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\21\11\1\u0209"+
    "\10\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u020a\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\3\11\1\u020b\26\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\5\11\1\u020c\24\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\4\11\1\u020d"+
    "\25\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\21\11\1\u020e\10\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\22\11\1\u020f\7\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\1\11\1\u0210\30\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\11\11\1\u0211"+
    "\20\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\16\11\1\u0212\13\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\15\11\1\u0213\14\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\14\11\1\u0214\15\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\5\11\1\u0215"+
    "\24\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u0216\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\1\11\1\u0217\30\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\5\11\1\u0218\24\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\22\11\1\u0219"+
    "\7\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\22\11\1\u021a\7\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\31\11\1\u021b\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\3\11\1\u021c\26\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\3\11\1\u021d\26\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\14\11"+
    "\1\u021e\15\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\27\11\1\u021f\2\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\22\11\1\u0220\7\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u0221\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0222\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\23\11\1\u0223\6\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\5\11\1\u0224\24\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\1\11\1\u0225\30\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\5\11"+
    "\1\u0226\24\11\4\0\2\11\10\0\1\11\13\0\10\11"+
    "\12\0\11\11\1\u0227\20\11\4\0\2\11\10\0\1\11"+
    "\13\0\10\11\12\0\3\11\1\u0228\26\11\4\0\2\11"+
    "\10\0\1\11\13\0\10\11\12\0\23\11\1\u0229\6\11"+
    "\4\0\2\11\10\0\1\11\13\0\10\11\12\0\1\u022a"+
    "\31\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\21\11\1\u022b\10\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\4\11\1\u022c\25\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\13\11\1\u022d\16\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\13\11\1\u022e"+
    "\16\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u022f\6\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\5\11\1\u0230\24\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\3\11\1\u0231\26\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\23\11\1\u0232"+
    "\6\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\17\11\1\u0233\12\11\4\0\2\11\10\0\1\11\13\0"+
    "\10\11\12\0\1\11\1\u0234\30\11\4\0\2\11\10\0"+
    "\1\11\13\0\10\11\12\0\23\11\1\u0235\6\11\4\0"+
    "\2\11\10\0\1\11\13\0\10\11\12\0\22\11\1\u0236"+
    "\7\11\4\0\2\11\10\0\1\11\13\0\10\11\12\0"+
    "\23\11\1\u0237\6\11\4\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\3\11\2\1\1\11"+
    "\5\1\1\11\3\1\3\11\25\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\11\11"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\1\11\1\1"+
    "\3\11\1\1\1\11\64\1\5\11\2\1\7\11\12\1"+
    "\1\11\1\0\1\11\1\1\2\11\106\1\4\11\2\0"+
    "\6\11\u013e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKinds type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKinds type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GeneratedScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 176: break;
          case 2:
            { /* Ignore: don't return anything. */
            }
            // fall through
          case 177: break;
          case 3:
            { return symbol(TokenKinds.NOT_OP);
            }
            // fall through
          case 178: break;
          case 4:
            { yybegin(STRING); string.setLength(0);
            }
            // fall through
          case 179: break;
          case 5:
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
            // fall through
          case 180: break;
          case 6:
            { return symbol(TokenKinds.MOD);
            }
            // fall through
          case 181: break;
          case 7:
            { return symbol(TokenKinds.AND_OP);
            }
            // fall through
          case 182: break;
          case 8:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 183: break;
          case 9:
            { return symbol(TokenKinds.LPAREN);
            }
            // fall through
          case 184: break;
          case 10:
            { return symbol(TokenKinds.RPAREN);
            }
            // fall through
          case 185: break;
          case 11:
            { return symbol(TokenKinds.MULT);
            }
            // fall through
          case 186: break;
          case 12:
            { return symbol(TokenKinds.PLUS);
            }
            // fall through
          case 187: break;
          case 13:
            { return symbol(TokenKinds.COMMA);
            }
            // fall through
          case 188: break;
          case 14:
            { return symbol(TokenKinds.MINUS);
            }
            // fall through
          case 189: break;
          case 15:
            { return symbol(TokenKinds.DOT);
            }
            // fall through
          case 190: break;
          case 16:
            { return symbol(TokenKinds.DIV);
            }
            // fall through
          case 191: break;
          case 17:
            { return symbol(TokenKinds.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 192: break;
          case 18:
            { return symbol(TokenKinds.SEMICOLON);
            }
            // fall through
          case 193: break;
          case 19:
            { return symbol(TokenKinds.LT);
            }
            // fall through
          case 194: break;
          case 20:
            { return symbol(TokenKinds.EQ);
            }
            // fall through
          case 195: break;
          case 21:
            { return symbol(TokenKinds.GT);
            }
            // fall through
          case 196: break;
          case 22:
            { return symbol(TokenKinds.QUESTION);
            }
            // fall through
          case 197: break;
          case 23:
            { return symbol(TokenKinds.LBRACK);
            }
            // fall through
          case 198: break;
          case 24:
            { return symbol(TokenKinds.RBRACK);
            }
            // fall through
          case 199: break;
          case 25:
            { return symbol(TokenKinds.XOR_OP);
            }
            // fall through
          case 200: break;
          case 26:
            { return symbol(TokenKinds.LBRACE);
            }
            // fall through
          case 201: break;
          case 27:
            { return symbol(TokenKinds.OR);
            }
            // fall through
          case 202: break;
          case 28:
            { return symbol(TokenKinds.RBRACE);
            }
            // fall through
          case 203: break;
          case 29:
            { return symbol(TokenKinds.COMP);
            }
            // fall through
          case 204: break;
          case 30:
            { string.append( yytext() );
            }
            // fall through
          case 205: break;
          case 31:
            { throw new RuntimeException("Unterminated string at end of line");
            }
            // fall through
          case 206: break;
          case 32:
            { yybegin(YYINITIAL); return symbol(TokenKinds.STRING_LITERAL, string.toString());
            }
            // fall through
          case 207: break;
          case 33:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
            // fall through
          case 208: break;
          case 34:
            { return symbol(TokenKinds.NOTEQ);
            }
            // fall through
          case 209: break;
          case 35:
            { return symbol(TokenKinds.MODEQ);
            }
            // fall through
          case 210: break;
          case 36:
            { return symbol(TokenKinds.ANDAND);
            }
            // fall through
          case 211: break;
          case 37:
            { return symbol(TokenKinds.ANDEQ);
            }
            // fall through
          case 212: break;
          case 38:
            { return symbol(TokenKinds.MULTEQ);
            }
            // fall through
          case 213: break;
          case 39:
            { return symbol(TokenKinds.PLUSPLUS);
            }
            // fall through
          case 214: break;
          case 40:
            { return symbol(TokenKinds.PLUSEQ);
            }
            // fall through
          case 215: break;
          case 41:
            { return symbol(TokenKinds.MINUSMINUS);
            }
            // fall through
          case 216: break;
          case 42:
            { return symbol(TokenKinds.MINUSEQ);
            }
            // fall through
          case 217: break;
          case 43:
            { return symbol(TokenKinds.MEMBERACCESS);
            }
            // fall through
          case 218: break;
          case 44:
            { return symbol(TokenKinds.ACCESSPTRDOT);
            }
            // fall through
          case 219: break;
          case 45:
            { /* ignore */
            }
            // fall through
          case 220: break;
          case 46:
            { return symbol(TokenKinds.DIVEQ);
            }
            // fall through
          case 221: break;
          case 47:
            { return symbol(TokenKinds.SCOPE);
            }
            // fall through
          case 222: break;
          case 48:
            { return symbol(TokenKinds.LSHIFT);
            }
            // fall through
          case 223: break;
          case 49:
            { return symbol(TokenKinds.LTEQ);
            }
            // fall through
          case 224: break;
          case 50:
            { return symbol(TokenKinds.EQEQ);
            }
            // fall through
          case 225: break;
          case 51:
            { return symbol(TokenKinds.GTEQ);
            }
            // fall through
          case 226: break;
          case 52:
            { return symbol(TokenKinds.RSHIFT);
            }
            // fall through
          case 227: break;
          case 53:
            { return symbol(TokenKinds.XOREQ);
            }
            // fall through
          case 228: break;
          case 54:
            { return symbol(TokenKinds.DO);
            }
            // fall through
          case 229: break;
          case 55:
            { return symbol(TokenKinds.IF);
            }
            // fall through
          case 230: break;
          case 56:
            { return symbol(TokenKinds.OREQ);
            }
            // fall through
          case 231: break;
          case 57:
            { return symbol(TokenKinds.OROR);
            }
            // fall through
          case 232: break;
          case 58:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 233: break;
          case 59:
            { string.append( '\"' );
            }
            // fall through
          case 234: break;
          case 60:
            { string.append( '\'' );
            }
            // fall through
          case 235: break;
          case 61:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
            // fall through
          case 236: break;
          case 62:
            { string.append( '\\' );
            }
            // fall through
          case 237: break;
          case 63:
            { string.append( '\b' );
            }
            // fall through
          case 238: break;
          case 64:
            { string.append( '\f' );
            }
            // fall through
          case 239: break;
          case 65:
            { string.append( '\n' );
            }
            // fall through
          case 240: break;
          case 66:
            { string.append( '\r' );
            }
            // fall through
          case 241: break;
          case 67:
            { string.append( '\t' );
            }
            // fall through
          case 242: break;
          case 68:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, yytext().charAt(0));
            }
            // fall through
          case 243: break;
          case 69:
            { return symbol(TokenKinds.ACCESSPTR);
            }
            // fall through
          case 244: break;
          case 70:
            { return symbol(TokenKinds.LSHIFTEQ);
            }
            // fall through
          case 245: break;
          case 71:
            { return symbol(TokenKinds.RSHIFTEQ);
            }
            // fall through
          case 246: break;
          case 72:
            { return symbol(TokenKinds.AND);
            }
            // fall through
          case 247: break;
          case 73:
            { return symbol(TokenKinds.ASM);
            }
            // fall through
          case 248: break;
          case 74:
            { return symbol(TokenKinds.FOR);
            }
            // fall through
          case 249: break;
          case 75:
            { return symbol(TokenKinds.INT);
            }
            // fall through
          case 250: break;
          case 76:
            { return symbol(TokenKinds.NEW);
            }
            // fall through
          case 251: break;
          case 77:
            { return symbol(TokenKinds.NOT);
            }
            // fall through
          case 252: break;
          case 78:
            { return symbol(TokenKinds.TRY);
            }
            // fall through
          case 253: break;
          case 79:
            { return symbol(TokenKinds.XOR);
            }
            // fall through
          case 254: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\"');
            }
            // fall through
          case 255: break;
          case 81:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\'');
            }
            // fall through
          case 256: break;
          case 82:
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(TokenKinds.CHARACTER_LITERAL, (char)val);
            }
            // fall through
          case 257: break;
          case 83:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\\');
            }
            // fall through
          case 258: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\b');
            }
            // fall through
          case 259: break;
          case 85:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\f');
            }
            // fall through
          case 260: break;
          case 86:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\n');
            }
            // fall through
          case 261: break;
          case 87:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\r');
            }
            // fall through
          case 262: break;
          case 88:
            { yybegin(YYINITIAL); return symbol(TokenKinds.CHARACTER_LITERAL, '\t');
            }
            // fall through
          case 263: break;
          case 89:
            { return symbol(TokenKinds.AUTO);
            }
            // fall through
          case 264: break;
          case 90:
            { return symbol(TokenKinds.BOOL);
            }
            // fall through
          case 265: break;
          case 91:
            { return symbol(TokenKinds.CASE);
            }
            // fall through
          case 266: break;
          case 92:
            { return symbol(TokenKinds.CHAR);
            }
            // fall through
          case 267: break;
          case 93:
            { return symbol(TokenKinds.ELSE);
            }
            // fall through
          case 268: break;
          case 94:
            { return symbol(TokenKinds.ENUM);
            }
            // fall through
          case 269: break;
          case 95:
            { return symbol(TokenKinds.GOTO);
            }
            // fall through
          case 270: break;
          case 96:
            { return symbol(TokenKinds.LONG);
            }
            // fall through
          case 271: break;
          case 97:
            { return symbol(TokenKinds.NULL_LITERAL);
            }
            // fall through
          case 272: break;
          case 98:
            { return symbol(TokenKinds.THIS);
            }
            // fall through
          case 273: break;
          case 99:
            { return symbol(TokenKinds.TRUE);
            }
            // fall through
          case 274: break;
          case 100:
            { return symbol(TokenKinds.VOID);
            }
            // fall through
          case 275: break;
          case 101:
            { return symbol(TokenKinds.BITOR);
            }
            // fall through
          case 276: break;
          case 102:
            { return symbol(TokenKinds.BREAK);
            }
            // fall through
          case 277: break;
          case 103:
            { return symbol(TokenKinds.CATCH);
            }
            // fall through
          case 278: break;
          case 104:
            { return symbol(TokenKinds.CLASS);
            }
            // fall through
          case 279: break;
          case 105:
            { return symbol(TokenKinds.COMPL);
            }
            // fall through
          case 280: break;
          case 106:
            { return symbol(TokenKinds.CONST);
            }
            // fall through
          case 281: break;
          case 107:
            { return symbol(TokenKinds.FALSE);
            }
            // fall through
          case 282: break;
          case 108:
            { return symbol(TokenKinds.FLOAT);
            }
            // fall through
          case 283: break;
          case 109:
            { return symbol(TokenKinds.OR_EQ);
            }
            // fall through
          case 284: break;
          case 110:
            { return symbol(TokenKinds.SHORT);
            }
            // fall through
          case 285: break;
          case 111:
            { return symbol(TokenKinds.THROW);
            }
            // fall through
          case 286: break;
          case 112:
            { return symbol(TokenKinds.UNION);
            }
            // fall through
          case 287: break;
          case 113:
            { return symbol(TokenKinds.USING);
            }
            // fall through
          case 288: break;
          case 114:
            { return symbol(TokenKinds.WHILE);
            }
            // fall through
          case 289: break;
          case 115:
            { return symbol(TokenKinds.AND_EQ);
            }
            // fall through
          case 290: break;
          case 116:
            { return symbol(TokenKinds.BITAND);
            }
            // fall through
          case 291: break;
          case 117:
            { return symbol(TokenKinds.DELETE);
            }
            // fall through
          case 292: break;
          case 118:
            { return symbol(TokenKinds.DOUBLE);
            }
            // fall through
          case 293: break;
          case 119:
            { return symbol(TokenKinds.EXPORT);
            }
            // fall through
          case 294: break;
          case 120:
            { return symbol(TokenKinds.EXTERN);
            }
            // fall through
          case 295: break;
          case 121:
            { return symbol(TokenKinds.FRIEND);
            }
            // fall through
          case 296: break;
          case 122:
            { return symbol(TokenKinds.INLINE);
            }
            // fall through
          case 297: break;
          case 123:
            { return symbol(TokenKinds.NOT_EQ);
            }
            // fall through
          case 298: break;
          case 124:
            { return symbol(TokenKinds.PUBLIC);
            }
            // fall through
          case 299: break;
          case 125:
            { return symbol(TokenKinds.RETURN);
            }
            // fall through
          case 300: break;
          case 126:
            { return symbol(TokenKinds.SIGNED);
            }
            // fall through
          case 301: break;
          case 127:
            { return symbol(TokenKinds.SIZEOF);
            }
            // fall through
          case 302: break;
          case 128:
            { return symbol(TokenKinds.STATIC);
            }
            // fall through
          case 303: break;
          case 129:
            { return symbol(TokenKinds.STRUCT);
            }
            // fall through
          case 304: break;
          case 130:
            { return symbol(TokenKinds.SWITCH);
            }
            // fall through
          case 305: break;
          case 131:
            { return symbol(TokenKinds.TYPEID);
            }
            // fall through
          case 306: break;
          case 132:
            { return symbol(TokenKinds.XOR_EQ);
            }
            // fall through
          case 307: break;
          case 133:
            { return symbol(TokenKinds.ALIGNAS);
            }
            // fall through
          case 308: break;
          case 134:
            { return symbol(TokenKinds.ALIGNOF);
            }
            // fall through
          case 309: break;
          case 135:
            { return symbol(TokenKinds.CHAR8_T);
            }
            // fall through
          case 310: break;
          case 136:
            { return symbol(TokenKinds.CONCEPT);
            }
            // fall through
          case 311: break;
          case 137:
            { return symbol(TokenKinds.DEFAULT);
            }
            // fall through
          case 312: break;
          case 138:
            { return symbol(TokenKinds.MUTABLE);
            }
            // fall through
          case 313: break;
          case 139:
            { return symbol(TokenKinds.NULLPTR);
            }
            // fall through
          case 314: break;
          case 140:
            { return symbol(TokenKinds.PRIVATE);
            }
            // fall through
          case 315: break;
          case 141:
            { return symbol(TokenKinds.TYPEDEF);
            }
            // fall through
          case 316: break;
          case 142:
            { return symbol(TokenKinds.VIRTUAL);
            }
            // fall through
          case 317: break;
          case 143:
            { return symbol(TokenKinds.WCHAR_T);
            }
            // fall through
          case 318: break;
          case 144:
            { return symbol(TokenKinds.CHAR16_T);
            }
            // fall through
          case 319: break;
          case 145:
            { return symbol(TokenKinds.CHAR32_T);
            }
            // fall through
          case 320: break;
          case 146:
            { return symbol(TokenKinds.CO_AWAIT);
            }
            // fall through
          case 321: break;
          case 147:
            { return symbol(TokenKinds.CO_YIELD);
            }
            // fall through
          case 322: break;
          case 148:
            { return symbol(TokenKinds.CONTINUE);
            }
            // fall through
          case 323: break;
          case 149:
            { return symbol(TokenKinds.DECLTYPE);
            }
            // fall through
          case 324: break;
          case 150:
            { return symbol(TokenKinds.EXPLICIT);
            }
            // fall through
          case 325: break;
          case 151:
            { return symbol(TokenKinds.NOEXCEPT);
            }
            // fall through
          case 326: break;
          case 152:
            { return symbol(TokenKinds.OPERATOR);
            }
            // fall through
          case 327: break;
          case 153:
            { return symbol(TokenKinds.REFLEXPR);
            }
            // fall through
          case 328: break;
          case 154:
            { return symbol(TokenKinds.REGISTER);
            }
            // fall through
          case 329: break;
          case 155:
            { return symbol(TokenKinds.REQUIRES);
            }
            // fall through
          case 330: break;
          case 156:
            { return symbol(TokenKinds.TEMPLATE);
            }
            // fall through
          case 331: break;
          case 157:
            { return symbol(TokenKinds.TYPENAME);
            }
            // fall through
          case 332: break;
          case 158:
            { return symbol(TokenKinds.UNSIGNED);
            }
            // fall through
          case 333: break;
          case 159:
            { return symbol(TokenKinds.VOLATILE);
            }
            // fall through
          case 334: break;
          case 160:
            { return symbol(TokenKinds.CO_RETURN);
            }
            // fall through
          case 335: break;
          case 161:
            { return symbol(TokenKinds.CONSTEVAL);
            }
            // fall through
          case 336: break;
          case 162:
            { return symbol(TokenKinds.CONSTEXPR);
            }
            // fall through
          case 337: break;
          case 163:
            { return symbol(TokenKinds.CONSTINIT);
            }
            // fall through
          case 338: break;
          case 164:
            { return symbol(TokenKinds.NAMESPACE);
            }
            // fall through
          case 339: break;
          case 165:
            { return symbol(TokenKinds.PROTECTED);
            }
            // fall through
          case 340: break;
          case 166:
            { return symbol(TokenKinds.CONST_CAST);
            }
            // fall through
          case 341: break;
          case 167:
            { return symbol(TokenKinds.CAST);
            }
            // fall through
          case 342: break;
          case 168:
            { return symbol(TokenKinds.DYNAMIC_CAST);
            }
            // fall through
          case 343: break;
          case 169:
            { return symbol(TokenKinds.SYNCHRONIZED);
            }
            // fall through
          case 344: break;
          case 170:
            { return symbol(TokenKinds.THREAD_LOCAL);
            }
            // fall through
          case 345: break;
          case 171:
            { return symbol(TokenKinds.ATOMIC_CANCEL);
            }
            // fall through
          case 346: break;
          case 172:
            { return symbol(TokenKinds.ATOMIC_COMMIT);
            }
            // fall through
          case 347: break;
          case 173:
            { return symbol(TokenKinds.STATIC_ASSERT);
            }
            // fall through
          case 348: break;
          case 174:
            { return symbol(TokenKinds.ATOMIC_NOEXCEPT);
            }
            // fall through
          case 349: break;
          case 175:
            { return symbol(TokenKinds.REINTERPRET_CAST);
            }
            // fall through
          case 350: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

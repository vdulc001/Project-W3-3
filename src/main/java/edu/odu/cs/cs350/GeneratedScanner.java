// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /home/cs_vdulc001/FallSemester2021/Project-W3-3/src/main/jflex/specifications.jflex

package edu.odu.cs.cs350;
//@SuppressWarnings("unused")


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class GeneratedScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\24\1\30\1\24\1\31"+
    "\1\24\1\32\1\33\1\34\1\35\1\36\1\37\1\3"+
    "\32\10\1\40\1\41\1\42\1\43\1\44\1\3\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\10\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\41\0\2\3\4\10"+
    "\4\3\1\10\2\3\1\0\7\3\1\10\4\3\1\10"+
    "\5\3\27\10\1\3\37\10\1\3\u01ca\10\4\3\14\10"+
    "\16\3\5\10\7\3\1\10\1\3\1\10\21\3\160\0"+
    "\5\10\1\3\2\10\2\3\4\10\1\3\1\10\6\3"+
    "\1\10\1\3\3\10\1\3\1\10\1\3\24\10\1\3"+
    "\123\10\1\3\213\10\1\3\5\0\2\3\246\10\1\3"+
    "\46\10\2\3\1\10\6\3\51\10\6\3\1\10\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\10\4\3\4\10\15\3\6\0\5\3"+
    "\1\10\4\3\13\0\1\3\1\0\3\3\53\10\37\0"+
    "\4\3\2\10\1\0\143\10\1\3\1\10\10\0\1\3"+
    "\6\0\2\10\2\0\1\3\4\0\2\10\12\0\3\10"+
    "\2\3\1\10\17\3\1\0\1\10\1\0\36\10\33\0"+
    "\2\3\131\10\13\0\1\10\16\3\12\0\41\10\11\0"+
    "\2\10\4\3\1\10\2\3\1\0\30\10\4\0\1\10"+
    "\11\0\1\10\3\0\1\10\5\0\22\3\31\10\3\0"+
    "\4\3\13\10\65\3\25\10\1\3\22\10\13\3\61\0"+
    "\66\10\3\0\1\10\22\0\1\10\7\0\12\10\2\0"+
    "\2\3\12\0\1\3\20\10\3\0\1\3\10\10\2\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\1\10\3\3"+
    "\4\10\2\3\1\0\1\10\7\0\2\3\2\0\2\3"+
    "\3\0\1\10\10\3\1\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\4\10\7\3\2\10\1\3\1\0"+
    "\2\3\3\0\1\3\6\10\4\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\2\10\1\3\2\10\1\3\2\10"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\10\1\3\1\10\7\3\14\0"+
    "\3\10\1\0\13\3\3\0\1\3\11\10\1\3\3\10"+
    "\1\3\26\10\1\3\7\10\1\3\2\10\1\3\5\10"+
    "\2\3\1\0\1\10\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\10\17\3\2\10\2\0\2\3\12\0\1\3"+
    "\1\10\7\3\1\10\6\0\1\3\3\0\1\3\10\10"+
    "\2\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\2\3\1\0\1\10\7\0\2\3\2\0"+
    "\2\3\3\0\7\3\3\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\1\3\1\10\20\3\1\0\1\10"+
    "\1\3\6\10\3\3\3\10\1\3\4\10\3\3\2\10"+
    "\1\3\1\10\1\3\2\10\3\3\2\10\3\3\3\10"+
    "\3\3\14\10\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\10\6\3\1\0\16\3\12\0\11\3\1\10"+
    "\6\3\5\0\10\10\1\3\3\10\1\3\27\10\1\3"+
    "\20\10\3\3\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\10\5\3\2\10\2\0\2\3"+
    "\12\0\20\3\1\10\3\0\1\3\10\10\1\3\3\10"+
    "\1\3\27\10\1\3\12\10\1\3\5\10\2\3\1\0"+
    "\1\10\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\10\1\3\2\10\2\0\2\3\12\0\1\3"+
    "\2\10\15\3\4\0\11\10\1\3\3\10\1\3\51\10"+
    "\2\0\1\10\7\0\1\3\3\0\1\3\4\0\1\10"+
    "\5\3\3\10\1\0\7\3\3\10\2\0\2\3\12\0"+
    "\12\3\6\10\1\3\3\0\1\3\22\10\3\3\30\10"+
    "\1\3\11\10\1\3\1\10\2\3\7\10\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\0"+
    "\2\3\2\0\15\3\60\10\1\0\2\10\7\0\4\3"+
    "\10\10\10\0\1\3\12\0\47\3\2\10\1\3\1\10"+
    "\1\3\5\10\1\3\30\10\1\3\1\10\1\3\12\10"+
    "\1\0\2\10\11\0\1\10\2\3\5\10\1\3\1\10"+
    "\1\3\6\0\2\3\12\0\2\3\4\10\40\3\1\10"+
    "\27\3\2\0\6\3\12\0\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\10\1\3\44\10\4\3"+
    "\24\0\1\3\2\0\5\10\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\10\24\0\1\10\12\0\6\3\6\10"+
    "\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10"+
    "\4\0\15\10\14\0\1\10\17\0\2\3\46\10\1\3"+
    "\1\10\5\3\1\10\2\3\53\10\1\3\115\10\1\3"+
    "\4\10\2\3\7\10\1\3\1\10\1\3\4\10\2\3"+
    "\51\10\1\3\4\10\2\3\41\10\1\3\4\10\2\3"+
    "\7\10\1\3\1\10\1\3\4\10\2\3\17\10\1\3"+
    "\71\10\1\3\4\10\2\3\103\10\2\3\3\0\40\3"+
    "\20\10\20\3\126\10\2\3\6\10\3\3\u016c\10\2\3"+
    "\21\10\1\3\32\10\5\3\113\10\3\3\13\10\7\3"+
    "\15\10\1\3\4\10\3\0\13\3\22\10\3\0\13\3"+
    "\22\10\2\0\14\3\15\10\1\3\3\10\1\3\2\0"+
    "\14\3\64\10\40\0\3\3\1\10\3\3\2\10\1\0"+
    "\2\3\12\0\41\3\4\0\1\3\12\0\6\3\131\10"+
    "\7\3\5\10\2\0\42\10\1\0\1\10\5\3\106\10"+
    "\12\3\37\10\1\3\14\0\4\3\14\0\12\3\12\0"+
    "\36\10\2\3\5\10\13\3\54\10\4\3\32\10\6\3"+
    "\12\0\46\3\27\10\5\0\4\3\65\10\12\0\1\3"+
    "\35\0\2\3\13\0\6\3\12\0\15\3\1\10\10\3"+
    "\16\0\1\3\2\0\77\3\5\0\57\10\21\0\7\10"+
    "\4\3\12\0\21\3\11\0\14\3\3\0\36\10\15\0"+
    "\2\10\12\0\54\10\16\0\14\3\44\10\24\0\10\3"+
    "\12\0\3\3\3\10\12\0\44\10\2\3\11\10\7\3"+
    "\53\10\2\3\3\10\20\3\3\0\1\3\25\0\4\10"+
    "\1\0\6\10\1\0\2\10\3\0\1\10\5\3\300\10"+
    "\72\0\1\3\5\0\26\10\2\3\6\10\2\3\46\10"+
    "\2\3\6\10\2\3\10\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\37\10\2\3\65\10\1\3\7\10"+
    "\1\3\1\10\3\3\3\10\1\3\7\10\3\3\4\10"+
    "\2\3\6\10\4\3\15\10\5\3\3\10\1\3\7\10"+
    "\16\3\5\0\32\3\5\0\20\3\2\10\23\3\1\10"+
    "\13\3\5\0\1\3\12\0\1\3\1\10\15\3\1\10"+
    "\20\3\15\10\3\3\40\10\20\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\10\4\3\1\10\2\3\12\10"+
    "\1\3\1\10\3\3\5\10\6\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\4\10\1\3\13\10\2\3\4\10"+
    "\5\3\5\10\4\3\1\10\21\3\51\10\u0177\3\57\10"+
    "\1\3\57\10\1\3\205\10\6\3\4\10\3\0\2\10"+
    "\14\3\46\10\1\3\1\10\5\3\1\10\2\3\70\10"+
    "\7\3\1\10\17\3\1\0\27\10\11\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\40\0\57\3"+
    "\1\10\325\3\3\10\31\3\11\10\6\0\1\3\5\10"+
    "\2\3\5\10\4\3\126\10\2\3\2\0\2\3\3\10"+
    "\1\3\132\10\1\3\4\10\5\3\53\10\1\3\136\10"+
    "\21\3\40\10\60\3\320\10\100\3\375\10\3\3\215\10"+
    "\103\3\56\10\2\3\15\10\3\3\20\10\12\0\2\10"+
    "\24\3\57\10\1\0\4\3\12\0\1\3\37\10\2\0"+
    "\120\10\2\0\45\3\11\10\2\3\147\10\2\3\65\10"+
    "\2\3\11\10\52\3\15\10\1\0\3\10\1\0\4\10"+
    "\1\0\27\10\5\0\4\3\1\0\13\3\1\10\7\3"+
    "\64\10\14\3\2\0\62\10\22\0\12\3\12\0\6\3"+
    "\22\0\6\10\3\3\1\10\1\3\2\10\13\0\34\10"+
    "\10\0\2\3\27\10\15\0\14\3\35\10\3\3\4\0"+
    "\57\10\16\0\16\3\1\10\12\0\6\3\5\10\1\0"+
    "\12\10\12\0\5\10\1\3\51\10\16\0\11\3\3\10"+
    "\1\0\10\10\2\0\2\3\12\0\6\3\27\10\3\3"+
    "\1\10\3\0\62\10\1\0\1\10\3\0\2\10\2\0"+
    "\5\10\2\0\1\10\1\0\1\10\30\3\3\10\2\3"+
    "\13\10\5\0\2\3\3\10\2\0\12\3\6\10\2\3"+
    "\6\10\2\3\6\10\11\3\7\10\1\3\7\10\1\3"+
    "\53\10\1\3\16\10\6\3\163\10\10\0\1\3\2\0"+
    "\2\3\12\0\6\3\244\10\14\3\27\10\4\3\61\10"+
    "\4\3\156\10\2\3\152\10\46\3\7\10\14\3\5\10"+
    "\5\3\1\10\1\0\12\10\1\3\15\10\1\3\5\10"+
    "\1\3\1\10\1\3\2\10\1\3\2\10\1\3\154\10"+
    "\41\3\153\10\22\3\100\10\2\3\66\10\50\3\15\10"+
    "\3\3\20\0\20\3\20\0\3\3\2\10\30\3\3\10"+
    "\31\3\1\10\6\3\5\10\1\3\207\10\2\3\1\0"+
    "\4\3\1\10\13\3\12\0\7\3\32\10\4\3\1\10"+
    "\1\3\32\10\13\3\131\10\3\3\6\10\2\3\6\10"+
    "\2\3\6\10\2\3\3\10\3\3\2\10\3\3\2\10"+
    "\22\3\3\0\4\3\14\10\1\3\32\10\1\3\23\10"+
    "\1\3\2\10\1\3\17\10\2\3\16\10\42\3\173\10"+
    "\105\3\65\10\210\3\1\0\202\3\35\10\3\3\61\10"+
    "\17\3\1\0\37\3\40\10\15\3\36\10\5\3\46\10"+
    "\5\0\5\3\36\10\2\3\44\10\4\3\10\10\1\3"+
    "\5\10\52\3\236\10\2\3\12\0\6\3\44\10\4\3"+
    "\44\10\4\3\50\10\10\3\64\10\234\3\67\10\11\3"+
    "\26\10\12\3\10\10\230\3\6\10\2\3\1\10\1\3"+
    "\54\10\1\3\2\10\3\3\1\10\2\3\27\10\12\3"+
    "\27\10\11\3\37\10\101\3\23\10\1\3\2\10\12\3"+
    "\26\10\12\3\32\10\106\3\70\10\6\3\2\10\100\3"+
    "\1\10\3\0\1\3\2\0\5\3\4\0\4\10\1\3"+
    "\3\10\1\3\35\10\2\3\3\0\4\3\1\0\40\3"+
    "\35\10\3\3\35\10\43\3\10\10\1\3\34\10\2\0"+
    "\31\3\66\10\12\3\26\10\12\3\23\10\15\3\22\10"+
    "\156\3\111\10\67\3\63\10\15\3\63\10\15\3\44\10"+
    "\4\0\10\3\12\0\u0146\3\52\10\1\3\2\0\3\3"+
    "\2\10\116\3\35\10\12\3\1\10\10\3\26\10\13\0"+
    "\137\3\25\10\33\3\27\10\11\3\3\0\65\10\17\0"+
    "\37\3\12\0\17\3\4\0\55\10\13\0\2\3\1\0"+
    "\17\3\1\0\2\3\31\10\7\3\12\0\6\3\3\0"+
    "\44\10\16\0\1\3\12\0\4\3\1\10\2\0\1\10"+
    "\10\3\43\10\1\0\2\3\1\10\11\3\3\0\60\10"+
    "\16\0\4\10\4\3\4\0\1\3\14\0\1\10\1\3"+
    "\1\10\43\3\22\10\1\3\31\10\14\0\6\3\1\0"+
    "\101\3\7\10\1\3\1\10\1\3\4\10\1\3\17\10"+
    "\1\3\12\10\7\3\57\10\14\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\10\2\3\2\10\2\3\26\10\1\3"+
    "\7\10\1\3\2\10\1\3\5\10\1\3\2\0\1\10"+
    "\7\0\2\3\2\0\2\3\3\0\2\3\1\10\6\3"+
    "\1\0\5\3\5\10\2\0\2\3\7\0\3\3\5\0"+
    "\213\3\65\10\22\0\4\10\5\3\12\0\4\3\1\0"+
    "\3\10\36\3\60\10\24\0\2\10\1\3\1\10\10\3"+
    "\12\0\246\3\57\10\7\0\2\3\11\0\27\3\4\10"+
    "\2\0\42\3\60\10\21\0\3\3\1\10\13\3\12\0"+
    "\46\3\53\10\15\0\1\10\7\3\12\0\66\3\33\10"+
    "\2\3\17\0\4\3\12\0\306\3\54\10\17\0\145\3"+
    "\100\10\12\0\25\3\10\10\2\3\1\10\2\3\10\10"+
    "\1\3\2\10\1\3\30\10\6\0\1\3\2\0\2\3"+
    "\4\0\1\10\1\0\1\10\2\0\14\3\12\0\106\3"+
    "\10\10\2\3\47\10\7\0\2\3\7\0\1\10\1\3"+
    "\1\10\1\0\33\3\1\10\12\0\50\10\7\0\1\10"+
    "\4\0\10\3\1\0\10\3\1\10\13\0\56\10\20\0"+
    "\3\3\1\10\42\3\71\10\7\3\11\10\1\3\45\10"+
    "\10\0\1\3\10\0\1\10\17\3\12\0\30\3\36\10"+
    "\2\3\26\0\1\3\16\0\111\3\7\10\1\3\2\10"+
    "\1\3\46\10\6\0\3\3\1\0\1\3\2\0\1\3"+
    "\7\0\1\10\1\0\10\3\12\0\6\3\6\10\1\3"+
    "\2\10\1\3\40\10\5\0\1\3\2\0\1\3\5\0"+
    "\1\10\7\3\12\0\u0136\3\23\10\4\0\271\3\1\10"+
    "\54\3\4\10\37\3\232\10\146\3\157\10\21\3\304\10"+
    "\274\3\57\10\1\3\11\0\307\3\107\10\271\3\71\10"+
    "\7\3\37\10\1\3\12\0\146\3\36\10\2\3\5\0"+
    "\13\3\60\10\7\0\11\3\4\10\14\3\12\0\11\3"+
    "\25\10\5\3\23\10\260\3\100\10\200\3\113\10\4\3"+
    "\1\0\1\10\67\0\7\3\4\0\15\10\100\3\2\10"+
    "\1\3\1\10\1\0\13\3\2\0\16\3\370\10\10\3"+
    "\326\10\52\3\11\10\367\3\37\10\61\3\3\10\21\3"+
    "\4\10\10\3\u018c\10\4\3\153\10\5\3\15\10\3\3"+
    "\11\10\7\3\12\10\3\3\2\0\1\3\4\0\301\3"+
    "\5\0\3\3\26\0\2\3\7\0\36\3\4\0\224\3"+
    "\3\0\273\3\125\10\1\3\107\10\1\3\2\10\2\3"+
    "\1\10\2\3\2\10\2\3\4\10\1\3\14\10\1\3"+
    "\1\10\1\3\7\10\1\3\101\10\1\3\4\10\2\3"+
    "\10\10\1\3\7\10\1\3\34\10\1\3\4\10\1\3"+
    "\5\10\1\3\1\10\3\3\7\10\1\3\u0154\10\2\3"+
    "\31\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\37\10\1\3\31\10\1\3"+
    "\37\10\1\3\31\10\1\3\10\10\2\3\151\0\4\3"+
    "\62\0\10\3\1\0\16\3\1\0\26\3\5\0\1\3"+
    "\17\0\120\3\7\0\1\3\21\0\2\3\7\0\1\3"+
    "\2\0\1\3\5\0\325\3\55\10\3\3\7\0\7\10"+
    "\2\3\12\0\4\3\1\10\u0171\3\54\10\16\0\5\3"+
    "\306\10\13\3\7\0\51\3\104\10\7\0\1\10\4\3"+
    "\12\0\u0156\3\1\10\117\3\4\10\1\3\33\10\1\3"+
    "\2\10\1\3\1\10\2\3\1\10\1\3\12\10\1\3"+
    "\4\10\1\3\1\10\1\3\1\10\6\3\1\10\4\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\3\10\1\3"+
    "\2\10\1\3\1\10\2\3\1\10\1\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\2\10\1\3"+
    "\1\10\2\3\4\10\1\3\7\10\1\3\4\10\1\3"+
    "\4\10\1\3\1\10\1\3\12\10\1\3\21\10\5\3"+
    "\3\10\1\3\5\10\1\3\21\10\u0134\3\12\0\6\3"+
    "\336\10\42\3\65\10\13\3\336\10\2\3\u0182\10\16\3"+
    "\u0131\10\37\3\36\10\342\3\113\10\266\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\24\4\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\7\0\1\36\1\37\1\40\2\0"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\16\4\1\61\11\4\1\62\10\4\1\31"+
    "\23\4\1\63\1\64\4\0\1\65\6\0\1\66\1\0"+
    "\2\50\1\67\1\70\1\4\1\71\1\72\10\4\1\73"+
    "\20\4\1\74\3\4\1\75\3\4\1\76\1\4\1\77"+
    "\26\4\1\100\11\4\1\101\11\0\3\4\1\102\2\4"+
    "\1\103\1\4\1\104\1\4\1\105\10\4\1\106\5\4"+
    "\1\107\1\110\6\4\1\111\1\4\1\112\4\4\1\113"+
    "\22\4\1\114\2\4\1\115\5\4\1\116\4\4\1\65"+
    "\5\0\4\4\1\117\1\120\1\121\3\4\1\122\3\4"+
    "\1\123\1\4\1\124\11\4\1\125\1\126\10\4\1\127"+
    "\10\4\1\130\10\4\1\131\3\4\1\132\1\4\1\133"+
    "\3\4\1\134\1\4\3\0\2\4\1\135\1\4\1\136"+
    "\15\4\1\137\1\140\2\4\1\141\1\142\1\143\1\144"+
    "\3\4\1\145\4\4\1\146\4\4\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\4\4\1\155\5\4\1\156\1\157"+
    "\1\160\3\4\1\161\3\4\1\162\6\4\1\163\2\4"+
    "\1\164\2\4\1\165\1\4\1\166\11\4\1\167\2\4"+
    "\1\170\1\4\1\171\2\4\1\172\1\173\1\174\1\4"+
    "\1\175\4\4\1\176\1\177\1\4\1\200\1\4\1\201"+
    "\1\202\1\4\1\203\1\204\1\4\1\205\3\4\1\206"+
    "\1\4\1\207\1\210\1\211\3\4\1\212\1\4\1\213"+
    "\1\214\1\215\1\4\1\216\1\217\10\4\1\220\14\4"+
    "\1\221\5\4\1\222\2\4\1\223\1\224\1\225\1\226"+
    "\2\4\1\227\2\4\1\230\1\4\1\231";

  private static int [] zzUnpackAction() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\102\0\102\0\u0294\0\u02d6\0\102"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\102\0\u0462\0\u04a4"+
    "\0\u04e6\0\102\0\102\0\102\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\102\0\u0a92\0\102\0\102\0\102\0\u0108\0\102"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\102"+
    "\0\102\0\102\0\u0252\0\u0ca2\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0ce4\0\102\0\u0d26\0\u0d68\0\102\0\u03de\0\102"+
    "\0\u0daa\0\102\0\102\0\102\0\u0dec\0\102\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u018c\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\102\0\102\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\102\0\u1e6c\0\102\0\u1eae\0\102\0\102\0\u1ef0\0\u1f32"+
    "\0\u018c\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u018c\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce"+
    "\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de"+
    "\0\u2520\0\u2562\0\u018c\0\u25a4\0\u25e6\0\u2628\0\u018c\0\u266a"+
    "\0\u26ac\0\u26ee\0\u018c\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u018c\0\u2d60\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246"+
    "\0\u3288\0\u32ca\0\u018c\0\u330c\0\u334e\0\u018c\0\u3390\0\u018c"+
    "\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u018c\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u018c\0\u018c\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u018c\0\u393c\0\u018c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u018c\0\u3f6c\0\u3fae\0\u018c\0\u3ff0\0\u4032"+
    "\0\u4074\0\u40b6\0\u40f8\0\u018c\0\u413a\0\u417c\0\u41be\0\u4200"+
    "\0\102\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce"+
    "\0\u4410\0\u4452\0\u018c\0\u018c\0\u018c\0\u4494\0\u44d6\0\u4518"+
    "\0\u018c\0\u455a\0\u459c\0\u45de\0\u018c\0\u4620\0\u4662\0\u46a4"+
    "\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4"+
    "\0\u018c\0\u018c\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40"+
    "\0\u4a82\0\u4ac4\0\u018c\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e"+
    "\0\u4c50\0\u4c92\0\u4cd4\0\u018c\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc"+
    "\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u018c\0\u4f26\0\u4f68\0\u4faa"+
    "\0\u018c\0\u4fec\0\u018c\0\u502e\0\u5070\0\u50b2\0\u018c\0\u50f4"+
    "\0\u5136\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u018c\0\u5280\0\u018c"+
    "\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490"+
    "\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u018c\0\u018c\0\u561c"+
    "\0\u565e\0\u018c\0\u018c\0\u018c\0\u018c\0\u56a0\0\u56e2\0\u5724"+
    "\0\u018c\0\u5766\0\u57a8\0\u57ea\0\u582c\0\u018c\0\u586e\0\u58b0"+
    "\0\u58f2\0\u5934\0\u018c\0\u018c\0\u018c\0\u5976\0\u018c\0\u018c"+
    "\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u018c\0\u5ac0\0\u5b02\0\u5b44"+
    "\0\u5b86\0\u5bc8\0\u018c\0\u018c\0\u018c\0\u5c0a\0\u5c4c\0\u5c8e"+
    "\0\u018c\0\u5cd0\0\u5d12\0\u5d54\0\u018c\0\u5d96\0\u5dd8\0\u5e1a"+
    "\0\u5e5c\0\u5e9e\0\u5ee0\0\u018c\0\u5f22\0\u5f64\0\u018c\0\u5fa6"+
    "\0\u5fe8\0\u018c\0\u602a\0\u018c\0\u606c\0\u60ae\0\u60f0\0\u6132"+
    "\0\u6174\0\u61b6\0\u61f8\0\u623a\0\u627c\0\u018c\0\u62be\0\u6300"+
    "\0\u018c\0\u6342\0\u018c\0\u6384\0\u63c6\0\u018c\0\u018c\0\u018c"+
    "\0\u6408\0\u018c\0\u644a\0\u648c\0\u64ce\0\u6510\0\u018c\0\u018c"+
    "\0\u6552\0\u018c\0\u6594\0\u018c\0\u018c\0\u65d6\0\u018c\0\u018c"+
    "\0\u6618\0\u018c\0\u665a\0\u669c\0\u66de\0\u018c\0\u6720\0\u018c"+
    "\0\u018c\0\u018c\0\u6762\0\u67a4\0\u67e6\0\u018c\0\u6828\0\u018c"+
    "\0\u018c\0\u018c\0\u686a\0\u018c\0\u018c\0\u68ac\0\u68ee\0\u6930"+
    "\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u018c\0\u6abc\0\u6afe"+
    "\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e"+
    "\0\u6d50\0\u6d92\0\u018c\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc"+
    "\0\u018c\0\u6f1e\0\u6f60\0\u018c\0\u018c\0\u018c\0\u018c\0\u6fa2"+
    "\0\u6fe4\0\u018c\0\u7026\0\u7068\0\u018c\0\u70aa\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\6\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\34\1\35\1\10\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\10\1\45"+
    "\1\10\1\46\1\47\1\50\1\51\1\52\1\10\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\2\10\1\62"+
    "\1\63\1\64\1\65\104\0\1\3\134\0\1\66\44\0"+
    "\2\67\1\70\3\67\1\70\32\67\1\71\40\67\50\0"+
    "\1\72\1\73\3\0\1\74\1\0\1\75\3\0\1\76"+
    "\4\0\1\77\11\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\32\10\41\0\1\100\56\0\1\101\22\0\1\102"+
    "\44\0\2\103\1\70\10\103\1\70\25\103\1\104\40\103"+
    "\35\0\1\105\63\0\1\106\15\0\1\107\65\0\1\110"+
    "\13\0\1\111\1\112\61\0\1\113\101\0\1\114\4\0"+
    "\1\115\11\0\1\116\70\0\6\24\12\0\1\117\67\0"+
    "\1\120\103\0\1\121\1\122\101\0\1\123\101\0\1\124"+
    "\1\125\100\0\1\126\44\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\13\10\1\127\1\10\1\130\4\10\1\131"+
    "\1\132\1\133\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\11\10\1\134\4\10\1\135\2\10\1\136"+
    "\10\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\10\1\137\6\10\1\140\1\141\1\10\1\142\2\10"+
    "\1\143\13\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\144\10\10\1\145\11\10\1\146\1\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\13\10"+
    "\1\147\1\10\1\150\11\10\1\151\2\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\10\1\152\11\10"+
    "\1\153\2\10\1\154\2\10\1\155\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\16\10\1\156\13\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\6\10"+
    "\1\157\6\10\1\160\14\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\16\10\1\161\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\24\10\1\162\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\10"+
    "\1\163\3\10\1\164\10\10\1\165\5\10\1\166\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\17\10"+
    "\1\167\1\10\1\170\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\21\10\1\171\2\10\1\172\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\173\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\10\10\1\174\1\175\11\10\1\176\2\10\1\177"+
    "\1\10\1\200\1\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\5\10\1\201\2\10\1\202\10\10\1\203"+
    "\6\10\1\204\1\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\15\10\1\205\4\10\1\206\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\11\10\1\207"+
    "\4\10\1\210\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\3\10\1\211\4\10\1\212\21\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\16\10\1\213"+
    "\13\10\41\0\1\214\41\0\1\215\2\0\2\67\1\70"+
    "\77\67\51\0\1\216\107\0\1\217\1\0\1\220\3\0"+
    "\1\221\66\0\1\222\5\0\1\223\1\224\75\0\1\225"+
    "\111\0\1\226\75\0\1\227\4\0\1\230\13\0\2\103"+
    "\1\70\77\103\16\0\1\231\63\0\16\114\1\232\63\114"+
    "\2\115\1\233\1\115\1\234\75\115\35\0\1\235\101\0"+
    "\1\236\44\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\237\20\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\4\10\1\240\25\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\14\10\1\241\15\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\16\10\1\242"+
    "\13\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\23\10\1\243\6\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\244\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\16\10\1\245\13\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\246"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\22\10\1\247\1\250\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\251\30\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\252\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\10"+
    "\1\253\30\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\254\13\10\1\255\1\256\6\10\1\257\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\3\10"+
    "\1\260\2\10\1\261\4\10\1\262\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\24\10\1\263\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\15\10"+
    "\1\264\14\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\22\10\1\265\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\24\10\1\266\5\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\17\10\1\267\3\10"+
    "\1\270\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\13\10\1\271\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\16\10\1\272\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\21\10\1\273\10\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\11\10"+
    "\1\274\20\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\275\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\276\7\10\1\277\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\15\10"+
    "\1\300\14\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\301\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\14\10\1\302\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\26\10\1\303\3\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\304\15\10\1\305\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\306\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\307\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\310"+
    "\31\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\311\4\10\1\312\13\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\2\10\1\313\27\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\6\10\1\314"+
    "\1\315\1\10\1\316\6\10\1\317\2\10\1\320\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\16\10"+
    "\1\321\13\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\7\10\1\322\21\10\1\323\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\324\17\10\1\325"+
    "\10\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\326\20\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\15\10\1\327\14\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\14\10\1\330\15\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\11\10\1\331"+
    "\7\10\1\332\10\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\24\10\1\333\3\10\1\334\1\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\17\10\1\335"+
    "\12\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\336\10\10\1\337\7\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\11\10\1\340\20\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\21\10\1\341"+
    "\10\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\342\1\10\1\343\16\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\10\10\1\344\21\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\11\10\1\345"+
    "\20\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\21\10\1\346\10\10\56\0\1\75\104\0\1\347\10\0"+
    "\1\350\63\0\1\351\116\0\1\352\64\0\1\353\10\0"+
    "\1\227\103\0\1\354\65\0\1\355\113\0\1\350\65\0"+
    "\1\356\104\0\1\353\106\0\1\357\24\0\16\114\1\232"+
    "\4\114\1\233\56\114\2\0\1\233\77\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\7\10\1\360\22\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\1\361\31\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\14\10"+
    "\1\362\15\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\16\10\1\363\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\364\14\10\1\365\13\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\13\10"+
    "\1\366\16\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\10\1\367\30\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\370\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\3\10\1\371\26\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\21\10"+
    "\1\372\10\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\22\10\1\373\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\374\17\10\1\375\6\10"+
    "\1\376\1\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\17\10\1\377\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u0100\16\10\1\u0101\1\u0102"+
    "\6\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\23\10\1\u0103\6\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\13\10\1\u0104\16\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\u0105\30\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\u0106"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\2\10\1\u0107\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\1\10\1\u0108\30\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\5\10\1\u0109\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\14\10\1\u010a"+
    "\15\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\13\10\1\u010b\2\10\1\u010c\13\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\5\10\1\u010d\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\22\10\1\u010e"+
    "\7\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\10\1\u010f\30\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\5\10\1\u0110\24\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\16\10\1\u0111\13\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\11\10\1\u0112"+
    "\20\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\7\10\1\u0113\22\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\1\10\1\u0114\30\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\5\10\1\u0115\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\27\10\1\u0116"+
    "\2\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\u0117\31\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\13\10\1\u0118\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\21\10\1\u0119\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u011a\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\25\10"+
    "\1\u011b\4\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\u011c\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\u011d\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\13\10\1\u011e\16\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\11\10"+
    "\1\u011f\20\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\15\10\1\u0120\14\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\24\10\1\u0121\5\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\24\10\1\u0122\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\21\10"+
    "\1\u0123\10\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\15\10\1\u0124\14\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u0125\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u0126\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\24\10"+
    "\1\u0127\5\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\u0128\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u0129\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\17\10\1\u012a\12\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\22\10"+
    "\1\u012b\7\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u012c\10\10\1\u012d\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u012e\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u012f\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\16\10\1\u0130\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\11\10\1\u0131\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u0132\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u0133\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\4\10\1\u0134\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\u0135\30\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\10\1\u0136\30\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\13\10"+
    "\1\u0137\16\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\u0138\31\10\56\0\1\u0139\100\0\1\u0139\105\0"+
    "\1\347\106\0\1\u013a\70\0\1\347\112\0\1\u013b\76\0"+
    "\1\u013c\75\0\1\u013d\107\0\1\u013e\20\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\15\10\1\u013f\14\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\u0140"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\u0141\20\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\15\10\1\u0142\14\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\21\10\1\u0143\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\12\10\1\u0144"+
    "\17\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\10\10\1\u0145\21\10\4\0\1\10\7\0\1\10\13\0"+
    "\1\10\1\u0146\1\10\1\u0147\1\10\1\u0148\12\0\32\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\22\10"+
    "\1\u0149\7\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\26\10\1\u014a\3\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u014b\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\11\10\1\u014c\20\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\13\10"+
    "\1\u014d\16\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u014e\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u014f\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\11\10\1\u0150\20\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u0151\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\24\10\1\u0152\5\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u0153\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\13\10\1\u0154\16\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\14\10"+
    "\1\u0155\15\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\11\10\1\u0156\20\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\21\10\1\u0157\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\21\10\1\u0158\10\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u0159\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\u015a\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\15\10\1\u015b\14\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u015c\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\2\10"+
    "\1\u015d\27\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\22\10\1\u015e\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u015f\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u0160\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\17\10"+
    "\1\u0161\12\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\10\1\u0162\30\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\20\10\1\u0163\11\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\10\1\u0164\30\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u0165\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\11\10\1\u0166\20\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u0167\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\22\10\1\u0168\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u0169\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\11\10\1\u016a\20\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\21\10\1\u016b\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u016c\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u016d\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\16\10\1\u016e\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\11\10\1\u016f\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\3\10\1\u0170\26\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\3\10"+
    "\1\u0171\26\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\10\10\1\u0172\21\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\u0173\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\10\1\u0174\30\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\26\10"+
    "\1\u0175\3\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\4\10\1\u0176\4\10\1\u0177\3\10\1\u0178\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\15\10"+
    "\1\u0179\14\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\7\10\1\u017a\22\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\7\10\1\u017b\22\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\24\10\1\u017c\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u017d\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\21\10\1\u017e\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u017f\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u0180\24\10"+
    "\71\0\1\u0139\101\0\1\u0181\104\0\1\u0182\71\0\1\u0183"+
    "\74\0\1\u0139\26\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\10\1\u0184\14\10\1\u0185\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\20\10\1\u0186\11\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\3\10"+
    "\1\u0187\26\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\4\10\1\u0188\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\4\10\1\u0189\1\10\12\0\32\10\4\0\1\10"+
    "\7\0\1\10\13\0\2\10\1\u018a\3\10\12\0\32\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\u018b"+
    "\31\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\10\1\u018c\30\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u018d\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\5\10\1\u018e\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\17\10\1\u018f"+
    "\12\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\u0190\4\10\1\u0191\3\10\1\u0192\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u0193\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\30\10"+
    "\1\u0194\1\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\13\10\1\u0195\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u0196\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u0197\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\11\10"+
    "\1\u0198\20\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\3\10\1\u0199\26\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u019a\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u019b\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\4\10"+
    "\1\u019c\25\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u019d\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\u019e\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\17\10\1\u019f\12\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01a0\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\20\10\1\u01a1\11\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u01a2\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u01a3\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u01a4\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\3\10\1\u01a5\26\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u01a6\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\27\10\1\u01a7\2\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u01a8\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u01a9\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\21\10\1\u01aa\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u01ab\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\4\10"+
    "\1\u01ac\25\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\6\10\1\u01ad\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u01ae\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u01af\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\10\10"+
    "\1\u01b0\21\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\21\10\1\u01b1\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\u01b2\30\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\4\10\1\u01b3\25\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01b4\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\4\10\1\u01b5\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\10\1\u01b6\30\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\15\10\1\u01b7\14\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\10"+
    "\1\u01b8\30\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\11\10\1\u01b9\20\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\1\u01ba\31\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\20\10\1\u01bb\11\10\73\0"+
    "\1\u0139\62\0\1\350\76\0\1\u0139\34\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\22\10\1\u01bc\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\6\10\1\u01bd"+
    "\23\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\1\u01be\31\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\u01bf\31\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\1\u01c0\31\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u01c1\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\11\10\1\u01c2\20\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\24\10"+
    "\1\u01c3\5\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\13\10\1\u01c4\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u01c5\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\3\10\1\u01c6\26\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\25\10"+
    "\1\u01c7\1\10\1\u01c8\2\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\15\10\1\u01c9\14\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\24\10\1\u01ca\5\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\17\10"+
    "\1\u01cb\12\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\23\10\1\u01cc\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\3\10\1\u01cd\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\11\10\1\u01ce\20\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01cf\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\10\1\u01d0\30\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\17\10\1\u01d1\12\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\21\10\1\u01d2\10\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\16\10"+
    "\1\u01d3\13\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u01d4\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u01d5\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\17\10\1\u01d6\12\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01d7\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\21\10\1\u01d8\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\5\10\1\u01d9\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\u01da\31\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\16\10\1\u01db"+
    "\13\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\23\10\1\u01dc\6\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\1\u01dd\31\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\6\10\1\u01de\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\14\10\1\u01df\15\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01e0\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\13\10\1\u01e1\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\13\10\1\u01e2\16\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u01e3\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\3\10"+
    "\1\u01e4\11\10\1\u01e5\14\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u01e6\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\23\10\1\u01e7\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u01e8\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\21\10\1\u01e9\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\4\10\1\u01ea\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\1\10\1\u01eb\30\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\10"+
    "\1\u01ec\30\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\17\10\1\u01ed\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\11\10\1\u01ee\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u01ef\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\5\10"+
    "\1\u01f0\24\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\u01f1\31\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u01f2\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\3\10\1\u01f3\26\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\23\10\1\u01f4"+
    "\6\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\21\10\1\u01f5\10\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\5\10\1\u01f6\24\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\21\10\1\u01f7\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\21\10\1\u01f8"+
    "\10\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\17\10\1\u01f9\12\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\22\10\1\u01fa\7\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\u01fb\1\10\1\u01fc"+
    "\26\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\15\10\1\u01fd\14\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\5\10\1\u01fe\24\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\13\10\1\u01ff\16\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\u0200"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\4\10\1\u0201\25\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\5\10\1\u0202\24\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\u0203\14\10\1\u0204"+
    "\13\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\16\10\1\u0205\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\15\10\1\u0206\14\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\22\10\1\u0207\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\13\10\1\u0208"+
    "\16\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\21\10\1\u0209\10\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u020a\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\3\10\1\u020b\26\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\u020c"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\4\10\1\u020d\25\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\21\10\1\u020e\10\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\22\10\1\u020f\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\1\10\1\u0210"+
    "\30\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\11\10\1\u0211\20\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\16\10\1\u0212\13\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\15\10\1\u0213\14\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\14\10\1\u0214"+
    "\15\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\5\10\1\u0215\24\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u0216\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\u0217\30\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\5\10\1\u0218"+
    "\24\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\22\10\1\u0219\7\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\22\10\1\u021a\7\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\31\10\1\u021b\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\3\10\1\u021c\26\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\3\10"+
    "\1\u021d\26\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\14\10\1\u021e\15\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\27\10\1\u021f\2\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\22\10\1\u0220\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u0221\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u0222\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\23\10\1\u0223\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\5\10\1\u0224\24\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\1\10"+
    "\1\u0225\30\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\5\10\1\u0226\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\6\10\12\0\11\10\1\u0227\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\6\10\12\0\3\10\1\u0228\26\10"+
    "\4\0\1\10\7\0\1\10\13\0\6\10\12\0\23\10"+
    "\1\u0229\6\10\4\0\1\10\7\0\1\10\13\0\6\10"+
    "\12\0\1\u022a\31\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\21\10\1\u022b\10\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\4\10\1\u022c\25\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\13\10\1\u022d"+
    "\16\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\13\10\1\u022e\16\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u022f\6\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\5\10\1\u0230\24\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\3\10\1\u0231"+
    "\26\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\23\10\1\u0232\6\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\17\10\1\u0233\12\10\4\0\1\10\7\0"+
    "\1\10\13\0\6\10\12\0\1\10\1\u0234\30\10\4\0"+
    "\1\10\7\0\1\10\13\0\6\10\12\0\23\10\1\u0235"+
    "\6\10\4\0\1\10\7\0\1\10\13\0\6\10\12\0"+
    "\22\10\1\u0236\7\10\4\0\1\10\7\0\1\10\13\0"+
    "\6\10\12\0\23\10\1\u0237\6\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28908];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\5\1\1\11"+
    "\3\1\3\11\25\1\1\11\1\1\3\11\1\0\1\11"+
    "\7\0\3\11\2\0\5\11\1\1\1\11\1\0\1\1"+
    "\1\11\1\0\1\11\1\1\3\11\1\1\1\11\65\1"+
    "\2\11\4\0\1\1\6\0\1\11\1\0\1\11\1\1"+
    "\2\11\110\1\11\0\111\1\1\11\5\0\102\1\3\0"+
    "\264\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKinds type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKinds type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GeneratedScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 154: break;
          case 2:
            { /* Ignore: don't return anything. */
            }
            // fall through
          case 155: break;
          case 3:
            { return symbol(TokenKinds.NOT_OP);
            }
            // fall through
          case 156: break;
          case 4:
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
            // fall through
          case 157: break;
          case 5:
            { return symbol(TokenKinds.MOD);
            }
            // fall through
          case 158: break;
          case 6:
            { return symbol(TokenKinds.AND_OP);
            }
            // fall through
          case 159: break;
          case 7:
            { return symbol(TokenKinds.LPAREN);
            }
            // fall through
          case 160: break;
          case 8:
            { return symbol(TokenKinds.RPAREN);
            }
            // fall through
          case 161: break;
          case 9:
            { return symbol(TokenKinds.MULT);
            }
            // fall through
          case 162: break;
          case 10:
            { return symbol(TokenKinds.PLUS);
            }
            // fall through
          case 163: break;
          case 11:
            { return symbol(TokenKinds.COMMA);
            }
            // fall through
          case 164: break;
          case 12:
            { return symbol(TokenKinds.MINUS);
            }
            // fall through
          case 165: break;
          case 13:
            { return symbol(TokenKinds.DOT);
            }
            // fall through
          case 166: break;
          case 14:
            { return symbol(TokenKinds.DIV);
            }
            // fall through
          case 167: break;
          case 15:
            { return symbol(TokenKinds.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 168: break;
          case 16:
            { return symbol(TokenKinds.SEMICOLON);
            }
            // fall through
          case 169: break;
          case 17:
            { return symbol(TokenKinds.LT);
            }
            // fall through
          case 170: break;
          case 18:
            { return symbol(TokenKinds.EQ);
            }
            // fall through
          case 171: break;
          case 19:
            { return symbol(TokenKinds.GT);
            }
            // fall through
          case 172: break;
          case 20:
            { return symbol(TokenKinds.QUESTION);
            }
            // fall through
          case 173: break;
          case 21:
            { return symbol(TokenKinds.LBRACK);
            }
            // fall through
          case 174: break;
          case 22:
            { return symbol(TokenKinds.RBRACK);
            }
            // fall through
          case 175: break;
          case 23:
            { return symbol(TokenKinds.XOR_OP);
            }
            // fall through
          case 176: break;
          case 24:
            { return symbol(TokenKinds.LBRACE);
            }
            // fall through
          case 177: break;
          case 25:
            { return symbol(TokenKinds.OR);
            }
            // fall through
          case 178: break;
          case 26:
            { return symbol(TokenKinds.RBRACE);
            }
            // fall through
          case 179: break;
          case 27:
            { return symbol(TokenKinds.COMP);
            }
            // fall through
          case 180: break;
          case 28:
            { return symbol(TokenKinds.NOTEQ);
            }
            // fall through
          case 181: break;
          case 29:
            { return symbol(TokenKinds.STRING);
            }
            // fall through
          case 182: break;
          case 30:
            { return symbol(TokenKinds.MODEQ);
            }
            // fall through
          case 183: break;
          case 31:
            { return symbol(TokenKinds.ANDAND);
            }
            // fall through
          case 184: break;
          case 32:
            { return symbol(TokenKinds.ANDEQ);
            }
            // fall through
          case 185: break;
          case 33:
            { return symbol(TokenKinds.MULTEQ);
            }
            // fall through
          case 186: break;
          case 34:
            { return symbol(TokenKinds.PLUSPLUS);
            }
            // fall through
          case 187: break;
          case 35:
            { return symbol(TokenKinds.PLUSEQ);
            }
            // fall through
          case 188: break;
          case 36:
            { return symbol(TokenKinds.MINUSMINUS);
            }
            // fall through
          case 189: break;
          case 37:
            { return symbol(TokenKinds.MINUSEQ);
            }
            // fall through
          case 190: break;
          case 38:
            { return symbol(TokenKinds.MEMBERACCESS);
            }
            // fall through
          case 191: break;
          case 39:
            { return symbol(TokenKinds.ACCESSPTRDOT);
            }
            // fall through
          case 192: break;
          case 40:
            { /* ignore */
            }
            // fall through
          case 193: break;
          case 41:
            { return symbol(TokenKinds.DIVEQ);
            }
            // fall through
          case 194: break;
          case 42:
            { return symbol(TokenKinds.SCOPE);
            }
            // fall through
          case 195: break;
          case 43:
            { return symbol(TokenKinds.LSHIFT);
            }
            // fall through
          case 196: break;
          case 44:
            { return symbol(TokenKinds.LTEQ);
            }
            // fall through
          case 197: break;
          case 45:
            { return symbol(TokenKinds.EQEQ);
            }
            // fall through
          case 198: break;
          case 46:
            { return symbol(TokenKinds.GTEQ);
            }
            // fall through
          case 199: break;
          case 47:
            { return symbol(TokenKinds.RSHIFT);
            }
            // fall through
          case 200: break;
          case 48:
            { return symbol(TokenKinds.XOREQ);
            }
            // fall through
          case 201: break;
          case 49:
            { return symbol(TokenKinds.DO);
            }
            // fall through
          case 202: break;
          case 50:
            { return symbol(TokenKinds.IF);
            }
            // fall through
          case 203: break;
          case 51:
            { return symbol(TokenKinds.OREQ);
            }
            // fall through
          case 204: break;
          case 52:
            { return symbol(TokenKinds.OROR);
            }
            // fall through
          case 205: break;
          case 53:
            { return symbol(TokenKinds.PREPROCESSOR);
            }
            // fall through
          case 206: break;
          case 54:
            { return symbol(TokenKinds.ACCESSPTR);
            }
            // fall through
          case 207: break;
          case 55:
            { return symbol(TokenKinds.LSHIFTEQ);
            }
            // fall through
          case 208: break;
          case 56:
            { return symbol(TokenKinds.RSHIFTEQ);
            }
            // fall through
          case 209: break;
          case 57:
            { return symbol(TokenKinds.AND);
            }
            // fall through
          case 210: break;
          case 58:
            { return symbol(TokenKinds.ASM);
            }
            // fall through
          case 211: break;
          case 59:
            { return symbol(TokenKinds.CIN);
            }
            // fall through
          case 212: break;
          case 60:
            { return symbol(TokenKinds.FOR);
            }
            // fall through
          case 213: break;
          case 61:
            { return symbol(TokenKinds.INT);
            }
            // fall through
          case 214: break;
          case 62:
            { return symbol(TokenKinds.NEW);
            }
            // fall through
          case 215: break;
          case 63:
            { return symbol(TokenKinds.NOT);
            }
            // fall through
          case 216: break;
          case 64:
            { return symbol(TokenKinds.TRY);
            }
            // fall through
          case 217: break;
          case 65:
            { return symbol(TokenKinds.XOR);
            }
            // fall through
          case 218: break;
          case 66:
            { return symbol(TokenKinds.AUTO);
            }
            // fall through
          case 219: break;
          case 67:
            { return symbol(TokenKinds.BOOL);
            }
            // fall through
          case 220: break;
          case 68:
            { return symbol(TokenKinds.CASE);
            }
            // fall through
          case 221: break;
          case 69:
            { return symbol(TokenKinds.CHAR);
            }
            // fall through
          case 222: break;
          case 70:
            { return symbol(TokenKinds.COUT);
            }
            // fall through
          case 223: break;
          case 71:
            { return symbol(TokenKinds.ELSE);
            }
            // fall through
          case 224: break;
          case 72:
            { return symbol(TokenKinds.ENUM);
            }
            // fall through
          case 225: break;
          case 73:
            { return symbol(TokenKinds.GOTO);
            }
            // fall through
          case 226: break;
          case 74:
            { return symbol(TokenKinds.LONG);
            }
            // fall through
          case 227: break;
          case 75:
            { return symbol(TokenKinds.NULL_LITERAL);
            }
            // fall through
          case 228: break;
          case 76:
            { return symbol(TokenKinds.THIS);
            }
            // fall through
          case 229: break;
          case 77:
            { return symbol(TokenKinds.TRUE);
            }
            // fall through
          case 230: break;
          case 78:
            { return symbol(TokenKinds.VOID);
            }
            // fall through
          case 231: break;
          case 79:
            { return symbol(TokenKinds.BITOR);
            }
            // fall through
          case 232: break;
          case 80:
            { return symbol(TokenKinds.BREAK);
            }
            // fall through
          case 233: break;
          case 81:
            { return symbol(TokenKinds.CATCH);
            }
            // fall through
          case 234: break;
          case 82:
            { return symbol(TokenKinds.CLASS);
            }
            // fall through
          case 235: break;
          case 83:
            { return symbol(TokenKinds.COMPL);
            }
            // fall through
          case 236: break;
          case 84:
            { return symbol(TokenKinds.CONST);
            }
            // fall through
          case 237: break;
          case 85:
            { return symbol(TokenKinds.FALSE);
            }
            // fall through
          case 238: break;
          case 86:
            { return symbol(TokenKinds.FLOAT);
            }
            // fall through
          case 239: break;
          case 87:
            { return symbol(TokenKinds.OR_EQ);
            }
            // fall through
          case 240: break;
          case 88:
            { return symbol(TokenKinds.SHORT);
            }
            // fall through
          case 241: break;
          case 89:
            { return symbol(TokenKinds.THROW);
            }
            // fall through
          case 242: break;
          case 90:
            { return symbol(TokenKinds.UNION);
            }
            // fall through
          case 243: break;
          case 91:
            { return symbol(TokenKinds.USING);
            }
            // fall through
          case 244: break;
          case 92:
            { return symbol(TokenKinds.WHILE);
            }
            // fall through
          case 245: break;
          case 93:
            { return symbol(TokenKinds.AND_EQ);
            }
            // fall through
          case 246: break;
          case 94:
            { return symbol(TokenKinds.BITAND);
            }
            // fall through
          case 247: break;
          case 95:
            { return symbol(TokenKinds.DELETE);
            }
            // fall through
          case 248: break;
          case 96:
            { return symbol(TokenKinds.DOUBLE);
            }
            // fall through
          case 249: break;
          case 97:
            { return symbol(TokenKinds.EXPORT);
            }
            // fall through
          case 250: break;
          case 98:
            { return symbol(TokenKinds.EXTERN);
            }
            // fall through
          case 251: break;
          case 99:
            { return symbol(TokenKinds.FRIEND);
            }
            // fall through
          case 252: break;
          case 100:
            { return symbol(TokenKinds.INLINE);
            }
            // fall through
          case 253: break;
          case 101:
            { return symbol(TokenKinds.NOT_EQ);
            }
            // fall through
          case 254: break;
          case 102:
            { return symbol(TokenKinds.PUBLIC);
            }
            // fall through
          case 255: break;
          case 103:
            { return symbol(TokenKinds.RETURN);
            }
            // fall through
          case 256: break;
          case 104:
            { return symbol(TokenKinds.SIGNED);
            }
            // fall through
          case 257: break;
          case 105:
            { return symbol(TokenKinds.SIZEOF);
            }
            // fall through
          case 258: break;
          case 106:
            { return symbol(TokenKinds.STATIC);
            }
            // fall through
          case 259: break;
          case 107:
            { return symbol(TokenKinds.STRUCT);
            }
            // fall through
          case 260: break;
          case 108:
            { return symbol(TokenKinds.SWITCH);
            }
            // fall through
          case 261: break;
          case 109:
            { return symbol(TokenKinds.TYPEID);
            }
            // fall through
          case 262: break;
          case 110:
            { return symbol(TokenKinds.XOR_EQ);
            }
            // fall through
          case 263: break;
          case 111:
            { return symbol(TokenKinds.ALIGNAS);
            }
            // fall through
          case 264: break;
          case 112:
            { return symbol(TokenKinds.ALIGNOF);
            }
            // fall through
          case 265: break;
          case 113:
            { return symbol(TokenKinds.CHAR8_T);
            }
            // fall through
          case 266: break;
          case 114:
            { return symbol(TokenKinds.CONCEPT);
            }
            // fall through
          case 267: break;
          case 115:
            { return symbol(TokenKinds.DEFAULT);
            }
            // fall through
          case 268: break;
          case 116:
            { return symbol(TokenKinds.MUTABLE);
            }
            // fall through
          case 269: break;
          case 117:
            { return symbol(TokenKinds.NULLPTR);
            }
            // fall through
          case 270: break;
          case 118:
            { return symbol(TokenKinds.PRIVATE);
            }
            // fall through
          case 271: break;
          case 119:
            { return symbol(TokenKinds.TYPEDEF);
            }
            // fall through
          case 272: break;
          case 120:
            { return symbol(TokenKinds.VIRTUAL);
            }
            // fall through
          case 273: break;
          case 121:
            { return symbol(TokenKinds.WCHAR_T);
            }
            // fall through
          case 274: break;
          case 122:
            { return symbol(TokenKinds.CHAR16_T);
            }
            // fall through
          case 275: break;
          case 123:
            { return symbol(TokenKinds.CHAR32_T);
            }
            // fall through
          case 276: break;
          case 124:
            { return symbol(TokenKinds.CO_AWAIT);
            }
            // fall through
          case 277: break;
          case 125:
            { return symbol(TokenKinds.CO_YIELD);
            }
            // fall through
          case 278: break;
          case 126:
            { return symbol(TokenKinds.CONTINUE);
            }
            // fall through
          case 279: break;
          case 127:
            { return symbol(TokenKinds.DECLTYPE);
            }
            // fall through
          case 280: break;
          case 128:
            { return symbol(TokenKinds.EXPLICIT);
            }
            // fall through
          case 281: break;
          case 129:
            { return symbol(TokenKinds.NOEXCEPT);
            }
            // fall through
          case 282: break;
          case 130:
            { return symbol(TokenKinds.OPERATOR);
            }
            // fall through
          case 283: break;
          case 131:
            { return symbol(TokenKinds.REFLEXPR);
            }
            // fall through
          case 284: break;
          case 132:
            { return symbol(TokenKinds.REGISTER);
            }
            // fall through
          case 285: break;
          case 133:
            { return symbol(TokenKinds.REQUIRES);
            }
            // fall through
          case 286: break;
          case 134:
            { return symbol(TokenKinds.TEMPLATE);
            }
            // fall through
          case 287: break;
          case 135:
            { return symbol(TokenKinds.TYPENAME);
            }
            // fall through
          case 288: break;
          case 136:
            { return symbol(TokenKinds.UNSIGNED);
            }
            // fall through
          case 289: break;
          case 137:
            { return symbol(TokenKinds.VOLATILE);
            }
            // fall through
          case 290: break;
          case 138:
            { return symbol(TokenKinds.CO_RETURN);
            }
            // fall through
          case 291: break;
          case 139:
            { return symbol(TokenKinds.CONSTEVAL);
            }
            // fall through
          case 292: break;
          case 140:
            { return symbol(TokenKinds.CONSTEXPR);
            }
            // fall through
          case 293: break;
          case 141:
            { return symbol(TokenKinds.CONSTINIT);
            }
            // fall through
          case 294: break;
          case 142:
            { return symbol(TokenKinds.NAMESPACE);
            }
            // fall through
          case 295: break;
          case 143:
            { return symbol(TokenKinds.PROTECTED);
            }
            // fall through
          case 296: break;
          case 144:
            { return symbol(TokenKinds.CONST_CAST);
            }
            // fall through
          case 297: break;
          case 145:
            { return symbol(TokenKinds.CAST);
            }
            // fall through
          case 298: break;
          case 146:
            { return symbol(TokenKinds.DYNAMIC_CAST);
            }
            // fall through
          case 299: break;
          case 147:
            { return symbol(TokenKinds.SYNCHRONIZED);
            }
            // fall through
          case 300: break;
          case 148:
            { return symbol(TokenKinds.THREAD_LOCAL);
            }
            // fall through
          case 301: break;
          case 149:
            { return symbol(TokenKinds.ATOMIC_CANCEL);
            }
            // fall through
          case 302: break;
          case 150:
            { return symbol(TokenKinds.ATOMIC_COMMIT);
            }
            // fall through
          case 303: break;
          case 151:
            { return symbol(TokenKinds.STATIC_ASSERT);
            }
            // fall through
          case 304: break;
          case 152:
            { return symbol(TokenKinds.ATOMIC_NOEXCEPT);
            }
            // fall through
          case 305: break;
          case 153:
            { return symbol(TokenKinds.REINTERPRET_CAST);
            }
            // fall through
          case 306: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Jacinda/Desktop/DupDetector/Project-W3-3/src/main/jflex/specifications.jflex

package edu.odu.cs.cs350;
//@SuppressWarnings("unused")


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class GeneratedScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\23\1\27\1\23\1\30"+
    "\1\23\1\31\1\32\1\33\1\34\1\35\1\36\1\3"+
    "\32\7\1\37\1\40\1\41\1\42\1\43\1\3\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\7\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\41\0\2\3\4\7"+
    "\4\3\1\7\2\3\1\0\7\3\1\7\4\3\1\7"+
    "\5\3\27\7\1\3\37\7\1\3\u01ca\7\4\3\14\7"+
    "\16\3\5\7\7\3\1\7\1\3\1\7\21\3\160\0"+
    "\5\7\1\3\2\7\2\3\4\7\1\3\1\7\6\3"+
    "\1\7\1\3\3\7\1\3\1\7\1\3\24\7\1\3"+
    "\123\7\1\3\213\7\1\3\5\0\2\3\246\7\1\3"+
    "\46\7\2\3\1\7\6\3\51\7\6\3\1\7\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\7\4\3\4\7\15\3\6\0\5\3"+
    "\1\7\4\3\13\0\1\3\1\0\3\3\53\7\37\0"+
    "\4\3\2\7\1\0\143\7\1\3\1\7\10\0\1\3"+
    "\6\0\2\7\2\0\1\3\4\0\2\7\12\0\3\7"+
    "\2\3\1\7\17\3\1\0\1\7\1\0\36\7\33\0"+
    "\2\3\131\7\13\0\1\7\16\3\12\0\41\7\11\0"+
    "\2\7\4\3\1\7\2\3\1\0\30\7\4\0\1\7"+
    "\11\0\1\7\3\0\1\7\5\0\22\3\31\7\3\0"+
    "\4\3\13\7\65\3\25\7\1\3\22\7\13\3\61\0"+
    "\66\7\3\0\1\7\22\0\1\7\7\0\12\7\2\0"+
    "\2\3\12\0\1\3\20\7\3\0\1\3\10\7\2\3"+
    "\2\7\2\3\26\7\1\3\7\7\1\3\1\7\3\3"+
    "\4\7\2\3\1\0\1\7\7\0\2\3\2\0\2\3"+
    "\3\0\1\7\10\3\1\0\4\3\2\7\1\3\3\7"+
    "\2\0\2\3\12\0\4\7\7\3\2\7\1\3\1\0"+
    "\2\3\3\0\1\3\6\7\4\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\2\7\1\3\2\7"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\7\1\3\1\7\7\3\14\0"+
    "\3\7\1\0\13\3\3\0\1\3\11\7\1\3\3\7"+
    "\1\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\7\17\3\2\7\2\0\2\3\12\0\1\3"+
    "\1\7\7\3\1\7\6\0\1\3\3\0\1\3\10\7"+
    "\2\3\2\7\2\3\26\7\1\3\7\7\1\3\2\7"+
    "\1\3\5\7\2\3\1\0\1\7\7\0\2\3\2\0"+
    "\2\3\3\0\7\3\3\0\4\3\2\7\1\3\3\7"+
    "\2\0\2\3\12\0\1\3\1\7\20\3\1\0\1\7"+
    "\1\3\6\7\3\3\3\7\1\3\4\7\3\3\2\7"+
    "\1\3\1\7\1\3\2\7\3\3\2\7\3\3\3\7"+
    "\3\3\14\7\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\7\6\3\1\0\16\3\12\0\11\3\1\7"+
    "\6\3\5\0\10\7\1\3\3\7\1\3\27\7\1\3"+
    "\20\7\3\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\7\5\3\2\7\2\0\2\3"+
    "\12\0\20\3\1\7\3\0\1\3\10\7\1\3\3\7"+
    "\1\3\27\7\1\3\12\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\7\1\3\2\7\2\0\2\3\12\0\1\3"+
    "\2\7\15\3\4\0\11\7\1\3\3\7\1\3\51\7"+
    "\2\0\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\5\3\3\7\1\0\7\3\3\7\2\0\2\3\12\0"+
    "\12\3\6\7\1\3\3\0\1\3\22\7\3\3\30\7"+
    "\1\3\11\7\1\3\1\7\2\3\7\7\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\0"+
    "\2\3\2\0\15\3\60\7\1\0\2\7\7\0\4\3"+
    "\10\7\10\0\1\3\12\0\47\3\2\7\1\3\1\7"+
    "\1\3\5\7\1\3\30\7\1\3\1\7\1\3\12\7"+
    "\1\0\2\7\11\0\1\7\2\3\5\7\1\3\1\7"+
    "\1\3\6\0\2\3\12\0\2\3\4\7\40\3\1\7"+
    "\27\3\2\0\6\3\12\0\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\7\1\3\44\7\4\3"+
    "\24\0\1\3\2\0\5\7\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\7\24\0\1\7\12\0\6\3\6\7"+
    "\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7"+
    "\4\0\15\7\14\0\1\7\17\0\2\3\46\7\1\3"+
    "\1\7\5\3\1\7\2\3\53\7\1\3\115\7\1\3"+
    "\4\7\2\3\7\7\1\3\1\7\1\3\4\7\2\3"+
    "\51\7\1\3\4\7\2\3\41\7\1\3\4\7\2\3"+
    "\7\7\1\3\1\7\1\3\4\7\2\3\17\7\1\3"+
    "\71\7\1\3\4\7\2\3\103\7\2\3\3\0\40\3"+
    "\20\7\20\3\126\7\2\3\6\7\3\3\u016c\7\2\3"+
    "\21\7\1\3\32\7\5\3\113\7\3\3\13\7\7\3"+
    "\15\7\1\3\4\7\3\0\13\3\22\7\3\0\13\3"+
    "\22\7\2\0\14\3\15\7\1\3\3\7\1\3\2\0"+
    "\14\3\64\7\40\0\3\3\1\7\3\3\2\7\1\0"+
    "\2\3\12\0\41\3\4\0\1\3\12\0\6\3\131\7"+
    "\7\3\5\7\2\0\42\7\1\0\1\7\5\3\106\7"+
    "\12\3\37\7\1\3\14\0\4\3\14\0\12\3\12\0"+
    "\36\7\2\3\5\7\13\3\54\7\4\3\32\7\6\3"+
    "\12\0\46\3\27\7\5\0\4\3\65\7\12\0\1\3"+
    "\35\0\2\3\13\0\6\3\12\0\15\3\1\7\10\3"+
    "\16\0\1\3\2\0\77\3\5\0\57\7\21\0\7\7"+
    "\4\3\12\0\21\3\11\0\14\3\3\0\36\7\15\0"+
    "\2\7\12\0\54\7\16\0\14\3\44\7\24\0\10\3"+
    "\12\0\3\3\3\7\12\0\44\7\2\3\11\7\7\3"+
    "\53\7\2\3\3\7\20\3\3\0\1\3\25\0\4\7"+
    "\1\0\6\7\1\0\2\7\3\0\1\7\5\3\300\7"+
    "\72\0\1\3\5\0\26\7\2\3\6\7\2\3\46\7"+
    "\2\3\6\7\2\3\10\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\37\7\2\3\65\7\1\3\7\7"+
    "\1\3\1\7\3\3\3\7\1\3\7\7\3\3\4\7"+
    "\2\3\6\7\4\3\15\7\5\3\3\7\1\3\7\7"+
    "\16\3\5\0\32\3\5\0\20\3\2\7\23\3\1\7"+
    "\13\3\5\0\1\3\12\0\1\3\1\7\15\3\1\7"+
    "\20\3\15\7\3\3\40\7\20\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\7\4\3\1\7\2\3\12\7"+
    "\1\3\1\7\3\3\5\7\6\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\4\7\1\3\13\7\2\3\4\7"+
    "\5\3\5\7\4\3\1\7\21\3\51\7\u0177\3\57\7"+
    "\1\3\57\7\1\3\205\7\6\3\4\7\3\0\2\7"+
    "\14\3\46\7\1\3\1\7\5\3\1\7\2\3\70\7"+
    "\7\3\1\7\17\3\1\0\27\7\11\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\40\0\57\3"+
    "\1\7\325\3\3\7\31\3\11\7\6\0\1\3\5\7"+
    "\2\3\5\7\4\3\126\7\2\3\2\0\2\3\3\7"+
    "\1\3\132\7\1\3\4\7\5\3\53\7\1\3\136\7"+
    "\21\3\40\7\60\3\320\7\100\3\375\7\3\3\215\7"+
    "\103\3\56\7\2\3\15\7\3\3\20\7\12\0\2\7"+
    "\24\3\57\7\1\0\4\3\12\0\1\3\37\7\2\0"+
    "\120\7\2\0\45\3\11\7\2\3\147\7\2\3\65\7"+
    "\2\3\11\7\52\3\15\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\4\3\1\0\13\3\1\7\7\3"+
    "\64\7\14\3\2\0\62\7\22\0\12\3\12\0\6\3"+
    "\22\0\6\7\3\3\1\7\1\3\2\7\13\0\34\7"+
    "\10\0\2\3\27\7\15\0\14\3\35\7\3\3\4\0"+
    "\57\7\16\0\16\3\1\7\12\0\6\3\5\7\1\0"+
    "\12\7\12\0\5\7\1\3\51\7\16\0\11\3\3\7"+
    "\1\0\10\7\2\0\2\3\12\0\6\3\27\7\3\3"+
    "\1\7\3\0\62\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\3\3\7\2\3"+
    "\13\7\5\0\2\3\3\7\2\0\12\3\6\7\2\3"+
    "\6\7\2\3\6\7\11\3\7\7\1\3\7\7\1\3"+
    "\53\7\1\3\16\7\6\3\163\7\10\0\1\3\2\0"+
    "\2\3\12\0\6\3\244\7\14\3\27\7\4\3\61\7"+
    "\4\3\156\7\2\3\152\7\46\3\7\7\14\3\5\7"+
    "\5\3\1\7\1\0\12\7\1\3\15\7\1\3\5\7"+
    "\1\3\1\7\1\3\2\7\1\3\2\7\1\3\154\7"+
    "\41\3\153\7\22\3\100\7\2\3\66\7\50\3\15\7"+
    "\3\3\20\0\20\3\20\0\3\3\2\7\30\3\3\7"+
    "\31\3\1\7\6\3\5\7\1\3\207\7\2\3\1\0"+
    "\4\3\1\7\13\3\12\0\7\3\32\7\4\3\1\7"+
    "\1\3\32\7\13\3\131\7\3\3\6\7\2\3\6\7"+
    "\2\3\6\7\2\3\3\7\3\3\2\7\3\3\2\7"+
    "\22\3\3\0\4\3\14\7\1\3\32\7\1\3\23\7"+
    "\1\3\2\7\1\3\17\7\2\3\16\7\42\3\173\7"+
    "\105\3\65\7\210\3\1\0\202\3\35\7\3\3\61\7"+
    "\17\3\1\0\37\3\40\7\15\3\36\7\5\3\46\7"+
    "\5\0\5\3\36\7\2\3\44\7\4\3\10\7\1\3"+
    "\5\7\52\3\236\7\2\3\12\0\6\3\44\7\4\3"+
    "\44\7\4\3\50\7\10\3\64\7\234\3\67\7\11\3"+
    "\26\7\12\3\10\7\230\3\6\7\2\3\1\7\1\3"+
    "\54\7\1\3\2\7\3\3\1\7\2\3\27\7\12\3"+
    "\27\7\11\3\37\7\101\3\23\7\1\3\2\7\12\3"+
    "\26\7\12\3\32\7\106\3\70\7\6\3\2\7\100\3"+
    "\1\7\3\0\1\3\2\0\5\3\4\0\4\7\1\3"+
    "\3\7\1\3\35\7\2\3\3\0\4\3\1\0\40\3"+
    "\35\7\3\3\35\7\43\3\10\7\1\3\34\7\2\0"+
    "\31\3\66\7\12\3\26\7\12\3\23\7\15\3\22\7"+
    "\156\3\111\7\67\3\63\7\15\3\63\7\15\3\44\7"+
    "\4\0\10\3\12\0\u0146\3\52\7\1\3\2\0\3\3"+
    "\2\7\116\3\35\7\12\3\1\7\10\3\26\7\13\0"+
    "\137\3\25\7\33\3\27\7\11\3\3\0\65\7\17\0"+
    "\37\3\12\0\17\3\4\0\55\7\13\0\2\3\1\0"+
    "\17\3\1\0\2\3\31\7\7\3\12\0\6\3\3\0"+
    "\44\7\16\0\1\3\12\0\4\3\1\7\2\0\1\7"+
    "\10\3\43\7\1\0\2\3\1\7\11\3\3\0\60\7"+
    "\16\0\4\7\4\3\4\0\1\3\14\0\1\7\1\3"+
    "\1\7\43\3\22\7\1\3\31\7\14\0\6\3\1\0"+
    "\101\3\7\7\1\3\1\7\1\3\4\7\1\3\17\7"+
    "\1\3\12\7\7\3\57\7\14\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\7\2\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\2\7\1\3\5\7\1\3\2\0\1\7"+
    "\7\0\2\3\2\0\2\3\3\0\2\3\1\7\6\3"+
    "\1\0\5\3\5\7\2\0\2\3\7\0\3\3\5\0"+
    "\213\3\65\7\22\0\4\7\5\3\12\0\4\3\1\0"+
    "\3\7\36\3\60\7\24\0\2\7\1\3\1\7\10\3"+
    "\12\0\246\3\57\7\7\0\2\3\11\0\27\3\4\7"+
    "\2\0\42\3\60\7\21\0\3\3\1\7\13\3\12\0"+
    "\46\3\53\7\15\0\1\7\7\3\12\0\66\3\33\7"+
    "\2\3\17\0\4\3\12\0\306\3\54\7\17\0\145\3"+
    "\100\7\12\0\25\3\10\7\2\3\1\7\2\3\10\7"+
    "\1\3\2\7\1\3\30\7\6\0\1\3\2\0\2\3"+
    "\4\0\1\7\1\0\1\7\2\0\14\3\12\0\106\3"+
    "\10\7\2\3\47\7\7\0\2\3\7\0\1\7\1\3"+
    "\1\7\1\0\33\3\1\7\12\0\50\7\7\0\1\7"+
    "\4\0\10\3\1\0\10\3\1\7\13\0\56\7\20\0"+
    "\3\3\1\7\42\3\71\7\7\3\11\7\1\3\45\7"+
    "\10\0\1\3\10\0\1\7\17\3\12\0\30\3\36\7"+
    "\2\3\26\0\1\3\16\0\111\3\7\7\1\3\2\7"+
    "\1\3\46\7\6\0\3\3\1\0\1\3\2\0\1\3"+
    "\7\0\1\7\1\0\10\3\12\0\6\3\6\7\1\3"+
    "\2\7\1\3\40\7\5\0\1\3\2\0\1\3\5\0"+
    "\1\7\7\3\12\0\u0136\3\23\7\4\0\271\3\1\7"+
    "\54\3\4\7\37\3\232\7\146\3\157\7\21\3\304\7"+
    "\274\3\57\7\1\3\11\0\307\3\107\7\271\3\71\7"+
    "\7\3\37\7\1\3\12\0\146\3\36\7\2\3\5\0"+
    "\13\3\60\7\7\0\11\3\4\7\14\3\12\0\11\3"+
    "\25\7\5\3\23\7\260\3\100\7\200\3\113\7\4\3"+
    "\1\0\1\7\67\0\7\3\4\0\15\7\100\3\2\7"+
    "\1\3\1\7\1\0\13\3\2\0\16\3\370\7\10\3"+
    "\326\7\52\3\11\7\367\3\37\7\61\3\3\7\21\3"+
    "\4\7\10\3\u018c\7\4\3\153\7\5\3\15\7\3\3"+
    "\11\7\7\3\12\7\3\3\2\0\1\3\4\0\301\3"+
    "\5\0\3\3\26\0\2\3\7\0\36\3\4\0\224\3"+
    "\3\0\273\3\125\7\1\3\107\7\1\3\2\7\2\3"+
    "\1\7\2\3\2\7\2\3\4\7\1\3\14\7\1\3"+
    "\1\7\1\3\7\7\1\3\101\7\1\3\4\7\2\3"+
    "\10\7\1\3\7\7\1\3\34\7\1\3\4\7\1\3"+
    "\5\7\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3"+
    "\31\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\10\7\2\3\151\0\4\3"+
    "\62\0\10\3\1\0\16\3\1\0\26\3\5\0\1\3"+
    "\17\0\120\3\7\0\1\3\21\0\2\3\7\0\1\3"+
    "\2\0\1\3\5\0\325\3\55\7\3\3\7\0\7\7"+
    "\2\3\12\0\4\3\1\7\u0171\3\54\7\16\0\5\3"+
    "\306\7\13\3\7\0\51\3\104\7\7\0\1\7\4\3"+
    "\12\0\u0156\3\1\7\117\3\4\7\1\3\33\7\1\3"+
    "\2\7\1\3\1\7\2\3\1\7\1\3\12\7\1\3"+
    "\4\7\1\3\1\7\1\3\1\7\6\3\1\7\4\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\3\7\1\3"+
    "\2\7\1\3\1\7\2\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\2\7\1\3"+
    "\1\7\2\3\4\7\1\3\7\7\1\3\4\7\1\3"+
    "\4\7\1\3\1\7\1\3\12\7\1\3\21\7\5\3"+
    "\3\7\1\3\5\7\1\3\21\7\u0134\3\12\0\6\3"+
    "\336\7\42\3\65\7\13\3\336\7\2\3\u0182\7\16\3"+
    "\u0131\7\37\3\36\7\342\3\113\7\266\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\24\4\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\2\0"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\15\4\1\61\11\4\1\62\10\4\1\31"+
    "\23\4\1\63\1\64\1\65\1\0\2\50\1\66\1\67"+
    "\1\4\1\70\1\71\27\4\1\72\3\4\1\73\3\4"+
    "\1\74\1\4\1\75\26\4\1\76\11\4\1\77\3\4"+
    "\1\100\2\4\1\101\1\4\1\102\1\4\1\103\15\4"+
    "\1\104\1\105\6\4\1\106\1\4\1\107\4\4\1\110"+
    "\22\4\1\111\2\4\1\112\5\4\1\113\10\4\1\114"+
    "\1\115\1\116\3\4\1\117\3\4\1\120\1\4\1\121"+
    "\11\4\1\122\1\123\10\4\1\124\10\4\1\125\10\4"+
    "\1\126\3\4\1\127\1\4\1\130\3\4\1\131\3\4"+
    "\1\132\1\4\1\133\15\4\1\134\1\135\2\4\1\136"+
    "\1\137\1\140\1\141\3\4\1\142\4\4\1\143\4\4"+
    "\1\144\1\145\1\146\1\147\1\150\1\151\4\4\1\152"+
    "\5\4\1\153\1\154\1\155\3\4\1\156\3\4\1\157"+
    "\6\4\1\160\2\4\1\161\2\4\1\162\1\4\1\163"+
    "\11\4\1\164\2\4\1\165\1\4\1\166\2\4\1\167"+
    "\1\170\1\171\1\4\1\172\4\4\1\173\1\174\1\4"+
    "\1\175\1\4\1\176\1\177\1\4\1\200\1\201\1\4"+
    "\1\202\3\4\1\203\1\4\1\204\1\205\1\206\3\4"+
    "\1\207\1\4\1\210\1\211\1\212\1\4\1\213\1\214"+
    "\10\4\1\215\14\4\1\216\5\4\1\217\2\4\1\220"+
    "\1\221\1\222\1\223\2\4\1\224\2\4\1\225\1\4"+
    "\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\101\0\101\0\u0249\0\u028a\0\101\0\u02cb"+
    "\0\u030c\0\u034d\0\u038e\0\u03cf\0\101\0\u0410\0\u0451\0\u0492"+
    "\0\101\0\101\0\101\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\101\0\u0a28\0\101\0\101\0\101\0\u0104\0\101\0\u0a69"+
    "\0\101\0\101\0\101\0\u0208\0\u0aaa\0\101\0\101\0\101"+
    "\0\101\0\101\0\u0aeb\0\101\0\u0b2c\0\u0b6d\0\101\0\u038e"+
    "\0\101\0\u0bae\0\101\0\101\0\101\0\u0bef\0\101\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u0145\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\101\0\101\0\101\0\u1923\0\101"+
    "\0\u1964\0\101\0\101\0\u19a5\0\u19e6\0\u0145\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u0145\0\u1ffe\0\u203f"+
    "\0\u2080\0\u0145\0\u20c1\0\u2102\0\u2143\0\u0145\0\u2184\0\u21c5"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5"+
    "\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u0145\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u0145\0\u2ae9\0\u2b2a\0\u0145"+
    "\0\u2b6b\0\u0145\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1"+
    "\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u2f3a\0\u0145\0\u0145\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f"+
    "\0\u30c0\0\u0145\0\u3101\0\u0145\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615"+
    "\0\u3656\0\u3697\0\u36d8\0\u0145\0\u3719\0\u375a\0\u0145\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u0145\0\u38e0\0\u3921\0\u3962"+
    "\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u0145\0\u0145\0\u0145"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u0145\0\u3bab\0\u3bec\0\u3c2d\0\u0145"+
    "\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u0145\0\u0145\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u0145\0\u4141\0\u4182"+
    "\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u0145\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u0145"+
    "\0\u4551\0\u4592\0\u45d3\0\u0145\0\u4614\0\u0145\0\u4655\0\u4696"+
    "\0\u46d7\0\u0145\0\u4718\0\u4759\0\u479a\0\u0145\0\u47db\0\u0145"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3"+
    "\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u0145\0\u0145\0\u4b69"+
    "\0\u4baa\0\u0145\0\u0145\0\u0145\0\u0145\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u0145\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u0145\0\u4db2\0\u4df3"+
    "\0\u4e34\0\u4e75\0\u0145\0\u0145\0\u0145\0\u4eb6\0\u0145\0\u0145"+
    "\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u0145\0\u4ffb\0\u503c\0\u507d"+
    "\0\u50be\0\u50ff\0\u0145\0\u0145\0\u0145\0\u5140\0\u5181\0\u51c2"+
    "\0\u0145\0\u5203\0\u5244\0\u5285\0\u0145\0\u52c6\0\u5307\0\u5348"+
    "\0\u5389\0\u53ca\0\u540b\0\u0145\0\u544c\0\u548d\0\u0145\0\u54ce"+
    "\0\u550f\0\u0145\0\u5550\0\u0145\0\u5591\0\u55d2\0\u5613\0\u5654"+
    "\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u0145\0\u57da\0\u581b"+
    "\0\u0145\0\u585c\0\u0145\0\u589d\0\u58de\0\u0145\0\u0145\0\u0145"+
    "\0\u591f\0\u0145\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u0145\0\u0145"+
    "\0\u5a64\0\u0145\0\u5aa5\0\u0145\0\u0145\0\u5ae6\0\u0145\0\u0145"+
    "\0\u5b27\0\u0145\0\u5b68\0\u5ba9\0\u5bea\0\u0145\0\u5c2b\0\u0145"+
    "\0\u0145\0\u0145\0\u5c6c\0\u5cad\0\u5cee\0\u0145\0\u5d2f\0\u0145"+
    "\0\u0145\0\u0145\0\u5d70\0\u0145\0\u0145\0\u5db1\0\u5df2\0\u5e33"+
    "\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u0145\0\u5fb9\0\u5ffa"+
    "\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u6202"+
    "\0\u6243\0\u6284\0\u0145\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9"+
    "\0\u0145\0\u640a\0\u644b\0\u0145\0\u0145\0\u0145\0\u0145\0\u648c"+
    "\0\u64cd\0\u0145\0\u650e\0\u654f\0\u0145\0\u6590\0\u0145";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\6\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\1\33\1\34\1\7\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\7\1\44\1\7"+
    "\1\45\1\46\1\47\1\50\1\51\1\7\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\2\7\1\61\1\62"+
    "\1\63\1\64\103\0\1\3\132\0\1\65\44\0\2\66"+
    "\1\67\3\66\1\67\31\66\1\70\40\66\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\32\7\40\0\1\71\55\0"+
    "\1\72\22\0\1\73\44\0\2\74\1\67\7\74\1\67"+
    "\25\74\1\75\40\74\34\0\1\76\62\0\1\77\15\0"+
    "\1\100\64\0\1\101\13\0\1\102\1\103\60\0\1\104"+
    "\100\0\1\105\4\0\1\106\11\0\1\107\67\0\6\23"+
    "\12\0\1\110\66\0\1\111\102\0\1\112\1\113\100\0"+
    "\1\114\100\0\1\115\1\116\77\0\1\117\44\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\13\7\1\120\1\7"+
    "\1\121\4\7\1\122\1\123\1\124\5\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\11\7\1\125\4\7"+
    "\1\126\2\7\1\127\10\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\7\1\130\6\7\1\131\2\7"+
    "\1\132\2\7\1\133\13\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\134\10\7\1\135\11\7"+
    "\1\136\1\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\13\7\1\137\1\7\1\140\11\7\1\141\2\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\142\11\7\1\143\2\7\1\144\2\7\1\145\10\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\16\7"+
    "\1\146\13\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\6\7\1\147\6\7\1\150\14\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\16\7\1\151\13\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\24\7"+
    "\1\152\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\153\3\7\1\154\10\7\1\155\5\7"+
    "\1\156\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\17\7\1\157\1\7\1\160\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\21\7\1\161\2\7"+
    "\1\162\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\163\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\10\7\1\164\1\165\11\7\1\166"+
    "\2\7\1\167\1\7\1\170\1\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\5\7\1\171\2\7\1\172"+
    "\10\7\1\173\6\7\1\174\1\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\15\7\1\175\4\7\1\176"+
    "\7\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\11\7\1\177\4\7\1\200\13\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\3\7\1\201\4\7\1\202"+
    "\21\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\16\7\1\203\13\7\40\0\1\204\41\0\1\205\2\0"+
    "\2\66\1\67\76\66\2\74\1\67\76\74\15\0\1\206"+
    "\63\0\15\105\1\207\63\105\2\106\1\210\1\106\1\211"+
    "\74\106\34\0\1\212\100\0\1\213\44\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\11\7\1\214\20\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\4\7\1\215"+
    "\25\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\14\7\1\216\15\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\16\7\1\217\13\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\220\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\23\7\1\221"+
    "\6\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\16\7\1\222\13\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\5\7\1\223\24\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\22\7\1\224\1\225\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\226\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\227\30\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\230\13\7\1\231\1\232\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\233\2\7\1\234\4\7\1\235\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\24\7\1\236\5\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\15\7"+
    "\1\237\14\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\22\7\1\240\7\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\24\7\1\241\5\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\17\7\1\242\3\7"+
    "\1\243\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\13\7\1\244\16\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\16\7\1\245\13\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\21\7\1\246\10\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\247\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\250\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\251\7\7\1\252\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\15\7"+
    "\1\253\14\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\254\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\14\7\1\255\15\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\26\7\1\256\3\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\257\15\7\1\260\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\261\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\262\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\263"+
    "\31\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\11\7\1\264\4\7\1\265\13\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\2\7\1\266\27\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\6\7\1\267"+
    "\1\270\1\7\1\271\6\7\1\272\2\7\1\273\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\16\7"+
    "\1\274\13\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\7\7\1\275\21\7\1\276\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\7\1\277\17\7\1\300"+
    "\10\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\11\7\1\301\20\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\15\7\1\302\14\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\14\7\1\303\15\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\11\7\1\304"+
    "\7\7\1\305\10\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\24\7\1\306\3\7\1\307\1\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\17\7\1\310"+
    "\12\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\11\7\1\311\10\7\1\312\7\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\11\7\1\313\20\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\21\7\1\314"+
    "\10\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\11\7\1\315\1\7\1\316\16\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\10\7\1\317\21\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\11\7\1\320"+
    "\20\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\21\7\1\321\10\7\4\0\15\105\1\207\4\105\1\210"+
    "\56\105\2\0\1\210\76\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\7\7\1\322\22\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\323\31\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\14\7\1\324\15\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\16\7"+
    "\1\325\13\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\326\14\7\1\327\13\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\13\7\1\330\16\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\331\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\332\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\3\7\1\333\26\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\21\7\1\334\10\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\22\7"+
    "\1\335\7\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\336\17\7\1\337\6\7\1\340\1\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\17\7"+
    "\1\341\12\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\342\16\7\1\343\1\344\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\13\7\1\345"+
    "\16\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\1\7\1\346\30\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\5\7\1\347\24\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\2\7\1\350\27\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\351"+
    "\30\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\352\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\14\7\1\353\15\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\13\7\1\354\2\7\1\355"+
    "\13\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\356\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\22\7\1\357\7\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\7\1\360\30\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\5\7\1\361"+
    "\24\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\16\7\1\362\13\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\11\7\1\363\20\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\7\7\1\364\22\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\365"+
    "\30\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\366\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\27\7\1\367\2\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\370\31\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\13\7\1\371\16\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\21\7"+
    "\1\372\10\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\373\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\25\7\1\374\4\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\375\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\13\7"+
    "\1\376\16\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\13\7\1\377\16\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\11\7\1\u0100\20\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u0101\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\24\7"+
    "\1\u0102\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\24\7\1\u0103\5\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\21\7\1\u0104\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u0105\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u0106\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u0107\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\24\7\1\u0108\5\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u0109\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u010a\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\17\7\1\u010b\12\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\22\7\1\u010c\7\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u010d\10\7"+
    "\1\u010e\13\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u010f\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u0110\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\16\7\1\u0111\13\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u0112\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\15\7\1\u0113\14\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\23\7\1\u0114\6\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\4\7\1\u0115\25\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\u0116\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\u0117\30\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\u0118\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\1\u0119\31\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\15\7\1\u011a"+
    "\14\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\u011b\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\11\7\1\u011c\20\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\15\7\1\u011d\14\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\21\7\1\u011e"+
    "\10\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\12\7\1\u011f\17\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\10\7\1\u0120\21\7\4\0\1\7\6\0"+
    "\1\7\13\0\1\7\1\u0121\1\7\1\u0122\1\7\1\u0123"+
    "\12\0\32\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\22\7\1\u0124\7\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\26\7\1\u0125\3\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u0126\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u0127\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\13\7\1\u0128\16\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u0129\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u012a\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u012b\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u012c\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\24\7\1\u012d\5\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u012e\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\13\7"+
    "\1\u012f\16\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\14\7\1\u0130\15\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\11\7\1\u0131\20\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\21\7\1\u0132\10\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\21\7"+
    "\1\u0133\10\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u0134\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\23\7\1\u0135\6\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u0136\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\15\7"+
    "\1\u0137\14\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\2\7\1\u0138\27\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\22\7\1\u0139\7\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\3\7\1\u013a\26\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u013b\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\17\7\1\u013c\12\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\7\1\u013d\30\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\20\7\1\u013e\11\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\u013f\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u0140\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\11\7\1\u0141\20\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u0142\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\22\7"+
    "\1\u0143\7\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u0144\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\11\7\1\u0145\20\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\21\7\1\u0146\10\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\23\7"+
    "\1\u0147\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u0148\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\16\7\1\u0149\13\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\11\7\1\u014a\20\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u014b\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\u014c\26\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\10\7\1\u014d\21\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\13\7\1\u014e\16\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\u014f\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\26\7\1\u0150\3\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\4\7\1\u0151\4\7\1\u0152\3\7"+
    "\1\u0153\14\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\15\7\1\u0154\14\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\7\7\1\u0155\22\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\7\7\1\u0156\22\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\24\7"+
    "\1\u0157\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u0158\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\21\7\1\u0159\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u015a\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u015b\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\u015c\14\7\1\u015d\13\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\20\7\1\u015e\11\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u015f\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\4\7\1\u0160\25\7\4\0\1\7\6\0\1\7"+
    "\13\0\4\7\1\u0161\1\7\12\0\32\7\4\0\1\7"+
    "\6\0\1\7\13\0\2\7\1\u0162\3\7\12\0\32\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\u0163"+
    "\31\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\1\7\1\u0164\30\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\23\7\1\u0165\6\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\5\7\1\u0166\24\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\17\7\1\u0167"+
    "\12\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\1\u0168\4\7\1\u0169\3\7\1\u016a\20\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u016b\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\30\7"+
    "\1\u016c\1\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\13\7\1\u016d\16\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u016e\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u016f\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u0170\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\u0171\26\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\23\7\1\u0172\6\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u0173\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\4\7"+
    "\1\u0174\25\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u0175\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\u0176\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\17\7\1\u0177\12\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u0178\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\20\7\1\u0179\11\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\23\7\1\u017a\6\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u017b\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\23\7"+
    "\1\u017c\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\u017d\26\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\3\7\1\u017e\26\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\27\7\1\u017f\2\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\23\7"+
    "\1\u0180\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u0181\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\21\7\1\u0182\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u0183\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\4\7"+
    "\1\u0184\25\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\6\7\1\u0185\23\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\3\7\1\u0186\26\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u0187\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\10\7"+
    "\1\u0188\21\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\21\7\1\u0189\10\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\7\1\u018a\30\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\4\7\1\u018b\25\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u018c\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\4\7\1\u018d\25\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\7\1\u018e\30\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u018f\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\u0190\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\11\7\1\u0191\20\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\u0192\31\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\20\7\1\u0193\11\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\22\7\1\u0194"+
    "\7\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\6\7\1\u0195\23\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\1\u0196\31\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\u0197\31\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\u0198\31\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u0199\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u019a\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\24\7\1\u019b\5\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\u019c\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u019d\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u019e\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\25\7\1\u019f\1\7\1\u01a0\2\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\15\7\1\u01a1\14\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\24\7"+
    "\1\u01a2\5\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\17\7\1\u01a3\12\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\23\7\1\u01a4\6\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\3\7\1\u01a5\26\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\11\7"+
    "\1\u01a6\20\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u01a7\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\7\1\u01a8\30\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\17\7\1\u01a9\12\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\21\7"+
    "\1\u01aa\10\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\16\7\1\u01ab\13\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u01ac\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u01ad\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\17\7"+
    "\1\u01ae\12\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u01af\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\21\7\1\u01b0\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\5\7\1\u01b1\24\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\u01b2"+
    "\31\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\16\7\1\u01b3\13\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\23\7\1\u01b4\6\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\1\u01b5\31\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\6\7\1\u01b6\23\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\14\7"+
    "\1\u01b7\15\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u01b8\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\13\7\1\u01b9\16\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\13\7\1\u01ba\16\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\23\7"+
    "\1\u01bb\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\u01bc\11\7\1\u01bd\14\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u01be\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\23\7"+
    "\1\u01bf\6\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u01c0\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\21\7\1\u01c1\10\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\4\7\1\u01c2\25\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\1\7"+
    "\1\u01c3\30\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\u01c4\30\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\17\7\1\u01c5\12\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\11\7\1\u01c6\20\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u01c7\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\5\7\1\u01c8\24\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\u01c9\31\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\u01ca\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\3\7\1\u01cb"+
    "\26\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\23\7\1\u01cc\6\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\21\7\1\u01cd\10\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\5\7\1\u01ce\24\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\21\7\1\u01cf"+
    "\10\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\21\7\1\u01d0\10\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\17\7\1\u01d1\12\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\22\7\1\u01d2\7\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\u01d3"+
    "\1\7\1\u01d4\26\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\15\7\1\u01d5\14\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\5\7\1\u01d6\24\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\13\7\1\u01d7"+
    "\16\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\u01d8\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\4\7\1\u01d9\25\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\5\7\1\u01da\24\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\u01db"+
    "\14\7\1\u01dc\13\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\16\7\1\u01dd\13\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\15\7\1\u01de\14\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\22\7\1\u01df"+
    "\7\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\13\7\1\u01e0\16\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\21\7\1\u01e1\10\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\u01e2\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\3\7\1\u01e3"+
    "\26\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\u01e4\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\4\7\1\u01e5\25\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\21\7\1\u01e6\10\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\22\7\1\u01e7"+
    "\7\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\1\7\1\u01e8\30\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\11\7\1\u01e9\20\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\16\7\1\u01ea\13\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\15\7\1\u01eb"+
    "\14\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\14\7\1\u01ec\15\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\5\7\1\u01ed\24\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\u01ee\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\u01ef"+
    "\30\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\5\7\1\u01f0\24\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\22\7\1\u01f1\7\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\22\7\1\u01f2\7\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\31\7\1\u01f3"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u01f4\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\3\7\1\u01f5\26\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\14\7\1\u01f6\15\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\27\7\1\u01f7\2\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\22\7"+
    "\1\u01f8\7\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u01f9\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u01fa\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\23\7\1\u01fb\6\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\5\7"+
    "\1\u01fc\24\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\1\7\1\u01fd\30\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\5\7\1\u01fe\24\7\4\0\1\7"+
    "\6\0\1\7\13\0\6\7\12\0\11\7\1\u01ff\20\7"+
    "\4\0\1\7\6\0\1\7\13\0\6\7\12\0\3\7"+
    "\1\u0200\26\7\4\0\1\7\6\0\1\7\13\0\6\7"+
    "\12\0\23\7\1\u0201\6\7\4\0\1\7\6\0\1\7"+
    "\13\0\6\7\12\0\1\u0202\31\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\21\7\1\u0203\10\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\4\7\1\u0204"+
    "\25\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\13\7\1\u0205\16\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\13\7\1\u0206\16\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\u0207\6\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\5\7\1\u0208"+
    "\24\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\3\7\1\u0209\26\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\23\7\1\u020a\6\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\17\7\1\u020b\12\7\4\0"+
    "\1\7\6\0\1\7\13\0\6\7\12\0\1\7\1\u020c"+
    "\30\7\4\0\1\7\6\0\1\7\13\0\6\7\12\0"+
    "\23\7\1\u020d\6\7\4\0\1\7\6\0\1\7\13\0"+
    "\6\7\12\0\22\7\1\u020e\7\7\4\0\1\7\6\0"+
    "\1\7\13\0\6\7\12\0\23\7\1\u020f\6\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26065];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\2\1\1\11\5\1\1\11"+
    "\3\1\3\11\25\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\3\11\2\0\5\11\1\1\1\11\1\0\1\1"+
    "\1\11\1\0\1\11\1\1\3\11\1\1\1\11\64\1"+
    "\3\11\1\0\1\11\1\1\2\11\u0184\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKinds type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKinds type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GeneratedScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKinds.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 151: break;
          case 2:
            { /* Ignore: don't return anything. */
            }
            // fall through
          case 152: break;
          case 3:
            { return symbol(TokenKinds.NOT_OP);
            }
            // fall through
          case 153: break;
          case 4:
            { return symbol(TokenKinds.IDENTIFIER, yytext());
            }
            // fall through
          case 154: break;
          case 5:
            { return symbol(TokenKinds.MOD);
            }
            // fall through
          case 155: break;
          case 6:
            { return symbol(TokenKinds.AND_OP);
            }
            // fall through
          case 156: break;
          case 7:
            { return symbol(TokenKinds.LPAREN);
            }
            // fall through
          case 157: break;
          case 8:
            { return symbol(TokenKinds.RPAREN);
            }
            // fall through
          case 158: break;
          case 9:
            { return symbol(TokenKinds.MULT);
            }
            // fall through
          case 159: break;
          case 10:
            { return symbol(TokenKinds.PLUS);
            }
            // fall through
          case 160: break;
          case 11:
            { return symbol(TokenKinds.COMMA);
            }
            // fall through
          case 161: break;
          case 12:
            { return symbol(TokenKinds.MINUS);
            }
            // fall through
          case 162: break;
          case 13:
            { return symbol(TokenKinds.DOT);
            }
            // fall through
          case 163: break;
          case 14:
            { return symbol(TokenKinds.DIV);
            }
            // fall through
          case 164: break;
          case 15:
            { return symbol(TokenKinds.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 165: break;
          case 16:
            { return symbol(TokenKinds.SEMICOLON);
            }
            // fall through
          case 166: break;
          case 17:
            { return symbol(TokenKinds.LT);
            }
            // fall through
          case 167: break;
          case 18:
            { return symbol(TokenKinds.EQ);
            }
            // fall through
          case 168: break;
          case 19:
            { return symbol(TokenKinds.GT);
            }
            // fall through
          case 169: break;
          case 20:
            { return symbol(TokenKinds.QUESTION);
            }
            // fall through
          case 170: break;
          case 21:
            { return symbol(TokenKinds.LBRACK);
            }
            // fall through
          case 171: break;
          case 22:
            { return symbol(TokenKinds.RBRACK);
            }
            // fall through
          case 172: break;
          case 23:
            { return symbol(TokenKinds.XOR_OP);
            }
            // fall through
          case 173: break;
          case 24:
            { return symbol(TokenKinds.LBRACE);
            }
            // fall through
          case 174: break;
          case 25:
            { return symbol(TokenKinds.OR);
            }
            // fall through
          case 175: break;
          case 26:
            { return symbol(TokenKinds.RBRACE);
            }
            // fall through
          case 176: break;
          case 27:
            { return symbol(TokenKinds.COMP);
            }
            // fall through
          case 177: break;
          case 28:
            { return symbol(TokenKinds.NOTEQ);
            }
            // fall through
          case 178: break;
          case 29:
            { return symbol(TokenKinds.STRING);
            }
            // fall through
          case 179: break;
          case 30:
            { return symbol(TokenKinds.MODEQ);
            }
            // fall through
          case 180: break;
          case 31:
            { return symbol(TokenKinds.ANDAND);
            }
            // fall through
          case 181: break;
          case 32:
            { return symbol(TokenKinds.ANDEQ);
            }
            // fall through
          case 182: break;
          case 33:
            { return symbol(TokenKinds.MULTEQ);
            }
            // fall through
          case 183: break;
          case 34:
            { return symbol(TokenKinds.PLUSPLUS);
            }
            // fall through
          case 184: break;
          case 35:
            { return symbol(TokenKinds.PLUSEQ);
            }
            // fall through
          case 185: break;
          case 36:
            { return symbol(TokenKinds.MINUSMINUS);
            }
            // fall through
          case 186: break;
          case 37:
            { return symbol(TokenKinds.MINUSEQ);
            }
            // fall through
          case 187: break;
          case 38:
            { return symbol(TokenKinds.MEMBERACCESS);
            }
            // fall through
          case 188: break;
          case 39:
            { return symbol(TokenKinds.ACCESSPTRDOT);
            }
            // fall through
          case 189: break;
          case 40:
            { /* ignore */
            }
            // fall through
          case 190: break;
          case 41:
            { return symbol(TokenKinds.DIVEQ);
            }
            // fall through
          case 191: break;
          case 42:
            { return symbol(TokenKinds.SCOPE);
            }
            // fall through
          case 192: break;
          case 43:
            { return symbol(TokenKinds.LSHIFT);
            }
            // fall through
          case 193: break;
          case 44:
            { return symbol(TokenKinds.LTEQ);
            }
            // fall through
          case 194: break;
          case 45:
            { return symbol(TokenKinds.EQEQ);
            }
            // fall through
          case 195: break;
          case 46:
            { return symbol(TokenKinds.GTEQ);
            }
            // fall through
          case 196: break;
          case 47:
            { return symbol(TokenKinds.RSHIFT);
            }
            // fall through
          case 197: break;
          case 48:
            { return symbol(TokenKinds.XOREQ);
            }
            // fall through
          case 198: break;
          case 49:
            { return symbol(TokenKinds.DO);
            }
            // fall through
          case 199: break;
          case 50:
            { return symbol(TokenKinds.IF);
            }
            // fall through
          case 200: break;
          case 51:
            { return symbol(TokenKinds.OREQ);
            }
            // fall through
          case 201: break;
          case 52:
            { return symbol(TokenKinds.OROR);
            }
            // fall through
          case 202: break;
          case 53:
            { return symbol(TokenKinds.ACCESSPTR);
            }
            // fall through
          case 203: break;
          case 54:
            { return symbol(TokenKinds.LSHIFTEQ);
            }
            // fall through
          case 204: break;
          case 55:
            { return symbol(TokenKinds.RSHIFTEQ);
            }
            // fall through
          case 205: break;
          case 56:
            { return symbol(TokenKinds.AND);
            }
            // fall through
          case 206: break;
          case 57:
            { return symbol(TokenKinds.ASM);
            }
            // fall through
          case 207: break;
          case 58:
            { return symbol(TokenKinds.FOR);
            }
            // fall through
          case 208: break;
          case 59:
            { return symbol(TokenKinds.INT);
            }
            // fall through
          case 209: break;
          case 60:
            { return symbol(TokenKinds.NEW);
            }
            // fall through
          case 210: break;
          case 61:
            { return symbol(TokenKinds.NOT);
            }
            // fall through
          case 211: break;
          case 62:
            { return symbol(TokenKinds.TRY);
            }
            // fall through
          case 212: break;
          case 63:
            { return symbol(TokenKinds.XOR);
            }
            // fall through
          case 213: break;
          case 64:
            { return symbol(TokenKinds.AUTO);
            }
            // fall through
          case 214: break;
          case 65:
            { return symbol(TokenKinds.BOOL);
            }
            // fall through
          case 215: break;
          case 66:
            { return symbol(TokenKinds.CASE);
            }
            // fall through
          case 216: break;
          case 67:
            { return symbol(TokenKinds.CHAR);
            }
            // fall through
          case 217: break;
          case 68:
            { return symbol(TokenKinds.ELSE);
            }
            // fall through
          case 218: break;
          case 69:
            { return symbol(TokenKinds.ENUM);
            }
            // fall through
          case 219: break;
          case 70:
            { return symbol(TokenKinds.GOTO);
            }
            // fall through
          case 220: break;
          case 71:
            { return symbol(TokenKinds.LONG);
            }
            // fall through
          case 221: break;
          case 72:
            { return symbol(TokenKinds.NULL_LITERAL);
            }
            // fall through
          case 222: break;
          case 73:
            { return symbol(TokenKinds.THIS);
            }
            // fall through
          case 223: break;
          case 74:
            { return symbol(TokenKinds.TRUE);
            }
            // fall through
          case 224: break;
          case 75:
            { return symbol(TokenKinds.VOID);
            }
            // fall through
          case 225: break;
          case 76:
            { return symbol(TokenKinds.BITOR);
            }
            // fall through
          case 226: break;
          case 77:
            { return symbol(TokenKinds.BREAK);
            }
            // fall through
          case 227: break;
          case 78:
            { return symbol(TokenKinds.CATCH);
            }
            // fall through
          case 228: break;
          case 79:
            { return symbol(TokenKinds.CLASS);
            }
            // fall through
          case 229: break;
          case 80:
            { return symbol(TokenKinds.COMPL);
            }
            // fall through
          case 230: break;
          case 81:
            { return symbol(TokenKinds.CONST);
            }
            // fall through
          case 231: break;
          case 82:
            { return symbol(TokenKinds.FALSE);
            }
            // fall through
          case 232: break;
          case 83:
            { return symbol(TokenKinds.FLOAT);
            }
            // fall through
          case 233: break;
          case 84:
            { return symbol(TokenKinds.OR_EQ);
            }
            // fall through
          case 234: break;
          case 85:
            { return symbol(TokenKinds.SHORT);
            }
            // fall through
          case 235: break;
          case 86:
            { return symbol(TokenKinds.THROW);
            }
            // fall through
          case 236: break;
          case 87:
            { return symbol(TokenKinds.UNION);
            }
            // fall through
          case 237: break;
          case 88:
            { return symbol(TokenKinds.USING);
            }
            // fall through
          case 238: break;
          case 89:
            { return symbol(TokenKinds.WHILE);
            }
            // fall through
          case 239: break;
          case 90:
            { return symbol(TokenKinds.AND_EQ);
            }
            // fall through
          case 240: break;
          case 91:
            { return symbol(TokenKinds.BITAND);
            }
            // fall through
          case 241: break;
          case 92:
            { return symbol(TokenKinds.DELETE);
            }
            // fall through
          case 242: break;
          case 93:
            { return symbol(TokenKinds.DOUBLE);
            }
            // fall through
          case 243: break;
          case 94:
            { return symbol(TokenKinds.EXPORT);
            }
            // fall through
          case 244: break;
          case 95:
            { return symbol(TokenKinds.EXTERN);
            }
            // fall through
          case 245: break;
          case 96:
            { return symbol(TokenKinds.FRIEND);
            }
            // fall through
          case 246: break;
          case 97:
            { return symbol(TokenKinds.INLINE);
            }
            // fall through
          case 247: break;
          case 98:
            { return symbol(TokenKinds.NOT_EQ);
            }
            // fall through
          case 248: break;
          case 99:
            { return symbol(TokenKinds.PUBLIC);
            }
            // fall through
          case 249: break;
          case 100:
            { return symbol(TokenKinds.RETURN);
            }
            // fall through
          case 250: break;
          case 101:
            { return symbol(TokenKinds.SIGNED);
            }
            // fall through
          case 251: break;
          case 102:
            { return symbol(TokenKinds.SIZEOF);
            }
            // fall through
          case 252: break;
          case 103:
            { return symbol(TokenKinds.STATIC);
            }
            // fall through
          case 253: break;
          case 104:
            { return symbol(TokenKinds.STRUCT);
            }
            // fall through
          case 254: break;
          case 105:
            { return symbol(TokenKinds.SWITCH);
            }
            // fall through
          case 255: break;
          case 106:
            { return symbol(TokenKinds.TYPEID);
            }
            // fall through
          case 256: break;
          case 107:
            { return symbol(TokenKinds.XOR_EQ);
            }
            // fall through
          case 257: break;
          case 108:
            { return symbol(TokenKinds.ALIGNAS);
            }
            // fall through
          case 258: break;
          case 109:
            { return symbol(TokenKinds.ALIGNOF);
            }
            // fall through
          case 259: break;
          case 110:
            { return symbol(TokenKinds.CHAR8_T);
            }
            // fall through
          case 260: break;
          case 111:
            { return symbol(TokenKinds.CONCEPT);
            }
            // fall through
          case 261: break;
          case 112:
            { return symbol(TokenKinds.DEFAULT);
            }
            // fall through
          case 262: break;
          case 113:
            { return symbol(TokenKinds.MUTABLE);
            }
            // fall through
          case 263: break;
          case 114:
            { return symbol(TokenKinds.NULLPTR);
            }
            // fall through
          case 264: break;
          case 115:
            { return symbol(TokenKinds.PRIVATE);
            }
            // fall through
          case 265: break;
          case 116:
            { return symbol(TokenKinds.TYPEDEF);
            }
            // fall through
          case 266: break;
          case 117:
            { return symbol(TokenKinds.VIRTUAL);
            }
            // fall through
          case 267: break;
          case 118:
            { return symbol(TokenKinds.WCHAR_T);
            }
            // fall through
          case 268: break;
          case 119:
            { return symbol(TokenKinds.CHAR16_T);
            }
            // fall through
          case 269: break;
          case 120:
            { return symbol(TokenKinds.CHAR32_T);
            }
            // fall through
          case 270: break;
          case 121:
            { return symbol(TokenKinds.CO_AWAIT);
            }
            // fall through
          case 271: break;
          case 122:
            { return symbol(TokenKinds.CO_YIELD);
            }
            // fall through
          case 272: break;
          case 123:
            { return symbol(TokenKinds.CONTINUE);
            }
            // fall through
          case 273: break;
          case 124:
            { return symbol(TokenKinds.DECLTYPE);
            }
            // fall through
          case 274: break;
          case 125:
            { return symbol(TokenKinds.EXPLICIT);
            }
            // fall through
          case 275: break;
          case 126:
            { return symbol(TokenKinds.NOEXCEPT);
            }
            // fall through
          case 276: break;
          case 127:
            { return symbol(TokenKinds.OPERATOR);
            }
            // fall through
          case 277: break;
          case 128:
            { return symbol(TokenKinds.REFLEXPR);
            }
            // fall through
          case 278: break;
          case 129:
            { return symbol(TokenKinds.REGISTER);
            }
            // fall through
          case 279: break;
          case 130:
            { return symbol(TokenKinds.REQUIRES);
            }
            // fall through
          case 280: break;
          case 131:
            { return symbol(TokenKinds.TEMPLATE);
            }
            // fall through
          case 281: break;
          case 132:
            { return symbol(TokenKinds.TYPENAME);
            }
            // fall through
          case 282: break;
          case 133:
            { return symbol(TokenKinds.UNSIGNED);
            }
            // fall through
          case 283: break;
          case 134:
            { return symbol(TokenKinds.VOLATILE);
            }
            // fall through
          case 284: break;
          case 135:
            { return symbol(TokenKinds.CO_RETURN);
            }
            // fall through
          case 285: break;
          case 136:
            { return symbol(TokenKinds.CONSTEVAL);
            }
            // fall through
          case 286: break;
          case 137:
            { return symbol(TokenKinds.CONSTEXPR);
            }
            // fall through
          case 287: break;
          case 138:
            { return symbol(TokenKinds.CONSTINIT);
            }
            // fall through
          case 288: break;
          case 139:
            { return symbol(TokenKinds.NAMESPACE);
            }
            // fall through
          case 289: break;
          case 140:
            { return symbol(TokenKinds.PROTECTED);
            }
            // fall through
          case 290: break;
          case 141:
            { return symbol(TokenKinds.CONST_CAST);
            }
            // fall through
          case 291: break;
          case 142:
            { return symbol(TokenKinds.CAST);
            }
            // fall through
          case 292: break;
          case 143:
            { return symbol(TokenKinds.DYNAMIC_CAST);
            }
            // fall through
          case 293: break;
          case 144:
            { return symbol(TokenKinds.SYNCHRONIZED);
            }
            // fall through
          case 294: break;
          case 145:
            { return symbol(TokenKinds.THREAD_LOCAL);
            }
            // fall through
          case 295: break;
          case 146:
            { return symbol(TokenKinds.ATOMIC_CANCEL);
            }
            // fall through
          case 296: break;
          case 147:
            { return symbol(TokenKinds.ATOMIC_COMMIT);
            }
            // fall through
          case 297: break;
          case 148:
            { return symbol(TokenKinds.STATIC_ASSERT);
            }
            // fall through
          case 298: break;
          case 149:
            { return symbol(TokenKinds.ATOMIC_NOEXCEPT);
            }
            // fall through
          case 299: break;
          case 150:
            { return symbol(TokenKinds.REINTERPRET_CAST);
            }
            // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
